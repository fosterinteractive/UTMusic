{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{# Get breadcrumbs block #}
{% set breadcrumbs = drupal_entity('block', 'menu_breadcrumbs') %}

{% if content.field_people_name[0] and content.field_people_last_name[0] %}
  {% set full_name = content.field_people_name[0]['#text'] ~ ' ' ~ content.field_people_last_name[0]['#text'] %}
{% endif %}

{# Set string of areas of specialization from array #}
{% if content.field_people_area[0] %}
  {% set areas = [] %}

  {# Get number of items #}
  {% if content.field_people_area['#items'].getIterator() %}
    {% set item_count = content.field_people_area['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to areas array #}
  {% for i in 0..item_count %}
    {% set areas = areas|merge([content.field_people_area[i]['#plain_text']]) %}
  {% endfor %}
{% endif %}

{# Set string of instruments from array #}
{% if content.field_people_instrument[0] %}
  {% set instruments_arr = [] %}

  {# Get number of items #}
  {% if content.field_people_instrument['#items'].getIterator() %}
    {% set item_count = content.field_people_instrument['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to instruments array #}
  {% for i in 0..item_count %}
    {% set instruments_arr = instruments_arr|merge([content.field_people_instrument[i]['#plain_text']]) %}
  {% endfor %}
{% endif %}

{# Set string of instruments from array #}
{% if content.field_people_ensembles_choirs[0] %}
  {% set ensembles_choirs = [] %}

  {# Get number of items #}
  {% if content.field_people_ensembles_choirs['#items'].getIterator() %}
    {% set item_count = content.field_people_ensembles_choirs['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to instruments array #}
  {% for i in 0..item_count %}
    {% set ensembles_choirs = ensembles_choirs|merge([content.field_people_ensembles_choirs[i]['#plain_text']]) %}
  {% endfor %}

  
{% endif %}

{# Set string of job titles from array #}
{% if content.field_people_job_title[0] %}
  {% set job_titles_arr = [] %}

  {# Get number of items #}
  {% if content.field_people_job_title['#items'].getIterator() %}
    {% set item_count = content.field_people_job_title['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to instruments array #}
  {% for i in 0..item_count %}
    {% set job_titles_arr = job_titles_arr|merge([content.field_people_job_title[i]['#plain_text']]) %}
  {% endfor %}
{% endif %}

{# Set string of job titles for Staff from array #}
{% if content.field_people_job_title_staff[0] %}
  {% set staff_job_titles_arr = [] %}

  {# Get number of items #}
  {% if content.field_people_job_title_staff['#items'].getIterator() %}
    {% set item_count = content.field_people_job_title_staff['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to instruments array #}
  {% for i in 0..item_count %}
    {% set staff_job_titles_arr = staff_job_titles_arr|merge([content.field_people_job_title_staff[i]['#plain_text']]) %}
  {% endfor %}
{% endif %}

{# Set string of job titles for Librarians from array #}
{% if content.field_people_job_title_library[0] %}
  {% set library_job_titles_arr = [] %}

  {# Get number of items #}
  {% if content.field_people_job_title_library['#items'].getIterator() %}
    {% set item_count = content.field_people_job_title_library['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to instruments array #}
  {% for i in 0..item_count %}
    {% set library_job_titles_arr = library_job_titles_arr|merge([content.field_people_job_title_library[i]['#plain_text']]) %}
  {% endfor %}
{% endif %}


{# Set string of Category (Former Role) from array #}
{% if content.field_people_role[0] %}
  {% set roles = [] %}

  {# Get number of items #}
  {% if content.field_people_role['#items'].getIterator() %}
    {% set item_count = content.field_people_role['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to instruments array #}
  {% for i in 0..item_count %}
    {% set roles = roles|merge([content.field_people_role[i]['#markup']]) %}
  {% endfor %}

  {% if roles %}
    {% if roles[0] == 'faculty' %}
  
      {% if content.field_people_faculty_position[0] %}
        {% set position_faculty = content.field_people_faculty_position[0]['#plain_text'] %}
      {% endif %}

      {% if job_titles_arr %}
        {% set job_titles = job_titles_arr|join(', ') %}
      {% endif %}

      {% if instruments_arr %}
        {% set instruments = instruments_arr|join(', ') %}
      {% endif %}

      {# {% if job_titles and instruments and position_faculty %}
        {% set title_suffix_faculty = roles[0]|capitalize ~ ': ' ~ position_faculty ~ ': ' ~ job_titles ~ ': ' ~ instruments %}
      {% elseif position_faculty and job_titles and not instruments %}
        {% set title_suffix_faculty = roles[0]|capitalize ~ ': ' ~ position_faculty ~ ': ' ~ job_titles %}
      {% elseif position_faculty and instruments  and not job_titles  %}
        {% set title_suffix_faculty = roles[0]|capitalize ~ ': ' ~ position_faculty ~ ': ' ~ instruments %}
      {% elseif job_titles and instruments  and not  position_faculty %}
        {% set title_suffix_faculty = roles[0]|capitalize ~ ': '  ~ job_titles ~ ': ' ~ instruments %}
      {% elseif position_faculty and not (instruments  or job_titles) %}
        {% set title_suffix_faculty = roles[0]|capitalize ~ ': ' ~ position_faculty %}
      {% elseif job_titles and not (instruments  or position_faculty) %}
        {% set title_suffix_faculty = roles[0]|capitalize ~ ': ' ~ job_titles %}
      {% elseif instruments and not (job_titles  or position_faculty) %}
        {% set title_suffix_faculty = roles[0]|capitalize ~ ': ' ~ instruments %}
      {% else %}
        {% set title_suffix_faculty = roles[0]|capitalize %}
      {% endif %} #}

      {% if job_titles and instruments %}
        {% set title_suffix_faculty = job_titles ~ ', ' ~ instruments %}
      {% elseif job_titles and not instruments %}
        {% set title_suffix_faculty = job_titles %}
      {% elseif instruments  and not job_titles  %}
        {% set title_suffix_faculty = instruments %}
      {% endif %}

    {% endif %}

    {% if roles[0] == 'staff' or roles[1] == 'staff' %}

      {% if staff_job_titles_arr %}
        {% set job_titles_staff = staff_job_titles_arr|join(', ') %}
      {% endif %}

      {% if content.field_people_staff_position[0] %}
        {% set position_staff = content.field_people_staff_position[0]['#plain_text'] %}
      {% endif %}

      {# {% if position_staff and job_titles_staff %}
        {% set title_suffix_staff = (roles[0] == 'staff'? roles[0]|capitalize : roles[1]|capitalize) ~ ': ' ~ position_staff ~ ': ' ~ job_titles_staff %}
      {% elseif job_titles_staff and not position_staff %}
        {% set title_suffix_staff = (roles[0] == 'staff'? roles[0]|capitalize : roles[1]|capitalize)  ~ ': ' ~ job_titles_staff %}
      {% elseif position_staff and not job_titles_staff %}
        {% set title_suffix_staff = (roles[0]== 'staff'? roles[0]|capitalize : roles[1]|capitalize)  ~ ': ' ~ position_staff %}
      {% else %}
        {% set title_suffix_staff = (roles[0]== 'staff'? roles[0]|capitalize : roles[1]|capitalize) %}
      {% endif %} #}

      {% if job_titles_staff %}
        {% set title_suffix_staff = job_titles_staff %}
      {% endif %}

    {% endif %}

    {% if roles[0] == 'library' or roles[1] == 'library' or roles[2] == 'library' %}

      {% if library_job_titles_arr %}
        {% set job_titles_library = library_job_titles_arr|join(', ') %}
      {% endif %}



      {% if job_titles_library %}
        {% set title_suffix_library = job_titles_library %}
      {% endif %}
    {% endif %}
  {% endif %}

{% endif %}

{# Set string of Roles (New Taxonomy) of specialization from array #}
{% if content.field_people_role_new[0] %}
  {% set new_roles = [] %}

  {# Get number of items #}
  {% if content.field_people_role_new['#items'].getIterator() %}
    {% set item_count = content.field_people_role_new['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to areas array #}
  {% for i in 0..item_count %}
    {% set role_weight = content.field_people_role_new[i]['#entity'].weight.value %}

    {% set new_roles = new_roles|merge([{ 'role': content.field_people_role_new[i]['#plain_text'], 'role_weight': role_weight }]) %}
  {% endfor %}
{% endif %}

{# Check if the feature media type exists #}
{% if content.field_people_enable_media[0] %}
  {# Get value of feauture media type #}
  {% set feature_media_list_type = content.field_people_enable_media[0]['#markup'] %}

  {# If "default" get dynamic auto-generated view of realted content #}
  {% if feature_media_list_type == 'view' %}
    {% set media_display = 'default' %}

    {% set rows = content.media_related_people['#rows'][0]['#rows'] %}

    {# Check how many items in the view  #}
    {% set auto_media_items = [] %}
    {% for row in rows %}
      {% set auto_media_items = auto_media_items|merge([row.content]) %}
    {% endfor %}

    {# We extract 1 because in template for carousel we count from 0 #}
    {% set auto_number_items_media = auto_media_items|length - 1 %}

    {% if auto_media_items|length  %}
      {# We prepare view of related media to person on theme preprocess  #}
      {% set featured_media = content.media_related_people %}
    {% endif %}

  {# If "manual", check for amount of items #}
  {% elseif feature_media_list_type == 'manual' %}
    {% if content.field_people_featured_media[0] %}
      {% set media_arr = [] %}
      
      {# Get the number of media items #}
      {% set media_count = content.field_people_featured_media['#items'].getIterator()|length - 1 %}

      {% set media_display = 'carousel' %}
      {# Create array with all items  #}
      {% for i in 0..media_count %}
        {% set media_arr = media_arr|merge([content.field_people_featured_media[i]]) %}
      {% endfor %}
   
    {% endif %}

    {% set featured_media = media_arr ? media_arr : media %}
  {% endif %}
{% endif %}

{# let check if fields have default text inside - then we hide them #}
{% if content.field_people_education[0] %}
  {% if content.field_people_education[0]['#text'] == '<h2 class="a-heading__h2">Education</h2><p>Insert Education information here</p>' %}
    {% set education = false %}
  {% else %}
    {% set education = content.field_people_education %}
  {% endif %}
{% endif %}

{% if content.field_people_background[0] %}
  {% if content.field_people_background[0]['#text'] == '<h2 class="a-heading__h2">Biography</h2><p>Insert Biography information here</p>' %}
    {% set background = false %}
  {% else %}
    {% set background = content.field_people_background %}
  {% endif %}
{% endif %}

{% if content.field_people_activities[0] %}
  {% if content.field_people_activities[0]['#text'] == '<h2 class="a-heading__h2">Professional Activities</h2><p>Insert Professional Activities information here</p>' %}
    {% set activities = false %}
  {% else %}
    {% set activities = content.field_people_activities %}
  {% endif %}
{% endif %}

{% if content.field_people_teaching[0] %}
  {% if content.field_people_teaching[0]['#text'] == '<h2 class="a-heading__h2">Teaching</h2><p>Insert Teaching information here</p>' %}
    {% set teaching = false %}
  {% else %}
    {% set teaching = content.field_people_teaching %}
  {% endif %}
{% endif %}


{% if content.field_people_creative_works[0] %}
  {% if content.field_people_creative_works[0]['#text'] == '<h2 class="a-heading__h2">Scholarly &amp; Creative Works</h2>' %}
    {% set creative_works = false %}
  {% else %}
    {% set creative_works = content.field_people_creative_works %}
  {% endif %}
{% endif %}


{% include "@layouts/main/main--people.twig" with {
    directory: 'themes/utmusic',
    moderation: content.content_moderation_control ? content.content_moderation_control,
    breadcrumbs: breadcrumbs,
    messages: drupal_entity('block', 'messages'),
    tabs: drupal_entity('block', 'tabs'),
    header_variation: content.field_people_image[0] ? 'person' : 'person-text',
    image: content.field_people_image[0] ? content.field_people_image,
    title: full_name,
    title_suffix_faculty: title_suffix_faculty,
    title_suffix_staff: title_suffix_staff,
    title_suffix_library: title_suffix_library,
    email: content.field_people_email[0] ? content.field_people_email[0]['#context']['value'],
    phone: content.field_people_phone[0] ? content.field_people_phone[0]['#context']['value'],
    website_url: content.field_people_website[0] ? content.field_people_website[0]['#url'],
    website_url_is_external: content.field_people_website[0] ? content.field_people_website[0]['#url'].external,
    discovery_url: research_url,
    pronunciation: content.field_people_pronunciation[0] ? content.field_people_pronunciation,
    prononun: content.field_people_pronouns[0] ? content.field_people_pronouns[0]['#text'],
    areas: areas,
    new_roles: new_roles ? new_roles|sort((a,b) => a.role_weight <=> b.role_weight)|column('role'),
    profile_type: content.field_people_profile_type[0] ? content.field_people_profile_type[0]['#markup'],
    education: education,
    background: background,
    activities: activities,
    teaching: teaching,
    creative_works: creative_works,
    custom_content: content.field_people_custom_content[0] ? content.field_people_custom_content,
    media_display: media_display,
    featured_media: featured_media,
    number_items: feature_media_list_type == 'manual' ? media_count : auto_number_items_media,
    ensembles_choirs: ensembles_choirs|join(', '),
  }
%}
{{ attach_library('utmusic/carousel-media') }}
