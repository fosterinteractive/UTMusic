{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
#}
{# Get breadcrumbs block #}
{% set breadcrumbs = drupal_entity('block', 'menu_breadcrumbs') %}

{# Check "show related events" field #}
{% if content.field_show_related_events[0] %}
  {% set show_related = content.field_show_related_events[0]['#markup'] %}

  {% if show_related == 1 %}
    {% if content.related_event_footer %}
      {% set related_events = content.related_event_footer %}
    {% endif %}
  {% endif %}
{% endif %}

{# Check if social share block is empty or not #}
{% set social_share_block = drupal_entity('block', 'sociallite')|render %}
{% if social_share_block|striptags|trim is not empty %}
  {% set social_share = social_share_block %}
{% endif %}

{# Set string of type of specialization from array #}
{% if content.field_event_type[0] %}
  {% set type = [] %}

  {# Get number of items #}
  {% if content.field_event_type['#items'].getIterator() %}
    {% set item_count = content.field_event_type['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to type array #}
  {% for i in 0..item_count %}
    {% set type = type|merge([content.field_event_type[i]['#plain_text']]) %}
  {% endfor %}
{% endif %}

{# Set string of areas of specialization from array #}
{% if content.field_event_area[0] %}
  {% set areas = [] %}

  {# Get number of items #}
  {% if content.field_event_area['#items'].getIterator() %}
    {% set item_count = content.field_event_area['#items'].getIterator()|length - 1 %}
  {% endif %}

  {# For each item add to areas array #}
  {% for i in 0..item_count %}
    {% set areas = areas|merge([content.field_event_area[i]['#plain_text']]) %}
  {% endfor %}
{% endif %}


{# Get check if custom location or listed #}
{% if content.field_event_location[0] %}
  {% set location_key = content.field_event_location[0]['#markup'] %}
  {% if location_key == 'Custom' %}
    {% if content.field_event_custom_location[0] %}
      {% set location = content.field_event_custom_location %}
    {% endif %}
  {% else %}
    {% set location = content.field_event_location[0]['#markup'] %}
  {% endif %}
{% endif %}

{# Get Start Date and break it apart  #}
{% if content.field_event_date[0] %}
  {% if content.field_event_date[0]['start_date'] %}
    {% set start_date = content.field_event_date[0]['start_date']['#text'] %}
  {% else %}
    {% set start_date = content.field_event_date[0]['#text'] %}
  {% endif %}

  {% set event_date = start_date|date('D, M j Y') %}
  {% set date_day = start_date|date('j') %}
  {% set date_month = start_date|date('F') %}
  {% set date_time = start_date|date('g:ia') %}

  {% if content.field_event_date[0]['end_date'] %}
    {% set end_date = content.field_event_date[0]['end_date']['#text'] %}

    {% set event_end_date = end_date|date('D, M j Y') %}
  {% endif %}

  {% if event_date is defined and event_end_date is defined %}
    {% set event_date_string = event_date ~ ' - ' ~ event_end_date %}
  {% else %}
    {% set event_date_string = event_date %}
  {% endif %}
{% endif %}

{# Check field target #}
{% if content.field_event_button_target[0] %}
  {% set target_value = content.field_event_button_target[0]['#markup'] %}

  {% if target_value == '_blank' %}
    {% set target = target_value %}
  {% endif %}
{% endif %}


{# Check if the feature media type exists #}
{% if content.field_event_featured_media_pick[0] %}
  {# Get value of feauture media type #}
  {% set feature_media_list_type = content.field_event_featured_media_pick[0]['#markup'] %}

  {# If "default" get dynamic auto-generated view of realted content #}
  {% if feature_media_list_type == 'default' %}
    {% set featured_media = drupal_view('media_related_to_content', 'media_related_event') %}
    {% set media_display = 'default' %}

  {# If "manual", check for amount of items #}
  {% elseif feature_media_list_type == 'manual' %}
    {% if content.field_event_featured_media[0] %}
      {% set media_arr = [] %}
      
      {# Get the number of media items #}
      {% set media_count = content.field_event_featured_media['#items'].getIterator()|length - 1 %}

      {% set media_display = 'carousel' %}
      {# Create array with all items  #}
      {% for i in 0..media_count %}
        {% set media_arr = media_arr|merge([content.field_event_featured_media[i]]) %}
      {% endfor %}
   
    {% endif %}

    {% set featured_media = media_arr ? media_arr : media %}
  {% endif %}
{% endif %}

{% if content.field_event_related_pick[0] %}
  {% set related_event_type = content.field_event_related_pick[0]['#markup'] %}

  {% if related_event_type == 'default' %}
    {% set related_display = 'default' %}

    {% if content.related_event_footer['#rows'][0] %}
      {% set related_events = content.related_event_footer %}
    {% endif %}
  {% elseif related_event_type == 'manual' %}
    {% set related_display = 'manual' %}

    {% set related_arr = [] %}

    {# Get the number of media items #}
    {% set related_count = content.field_event_related_events['#items'].getIterator()|length - 1 %}

    {% for i in 0..related_count %}
      {% set related_arr = related_arr|merge([content.field_event_related_events[i]]) %}
    {% endfor %}

    {% set related_events = related_arr %}
  {% endif %}
{% endif %}

{% include "@layouts/main/main--event.twig" with {
    directory: 'themes/utmusic',
    social_share: social_share,
    breadcrumbs: breadcrumbs,
    messages: drupal_entity('block', 'messages'),
    tabs: drupal_entity('block', 'tabs'),
    header_variation: content.field_event_header_variation[0] ? content.field_event_header_variation[0]['#markup'],
    title: content.field_event_title[0] ? content.field_event_title,
    image_landscape: content.field_event_header_image_landsca[0] ? content.field_event_header_image_landsca,
    image_portrait: content.field_event_header_image_portra[0] ? content.field_event_header_image_portra,
    location: location,
    event_date: event_date_string,
    event_time: date_time,
    event_types: type,
    event_areas: areas,
    event_price: content.field_event_price[0] ? content.field_event_price[0]['#markup'],
    btn_url: content.field_event_button_url[0] ? content.field_event_button_url[0]['#url_title'],
    btn_label: content.field_event_button_label[0] ? content.field_event_button_label[0]['#context']['value'],
    btn_a11y: content.field_event_button_a11y[0] ? content.field_event_button_a11y[0]['#context']['value'],
    btn_target: target,
    content: content.field_event_body[0] ? content.field_event_body,
    media_display: media_display,
    featured_media: featured_media,
    related_display: related_display, 
    related_events: related_events,
    number_items: media_count,
  }
%}


{{ attach_library('utmusic/carousel-events') }}