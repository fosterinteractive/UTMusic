{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set program_full_list_type = NULL %}
{# {% set program_full_list_stream = NULL %} #}

{% if content.field_program_full_list_type[0] %}
  {# Get number of items #}
  {% set item_count = paragraph.field_program_full_list_type.value|length %}

  {# For each item add to program_full_list_type string - Eg. 3 terms will get commas for or filters "12,34,64" #}
  {% for i in 0..item_count - 1 %}
    {% set term_id = paragraph.field_program_full_list_type[i].value['target_id'] %}
    {% set program_full_list_type = program_full_list_type ~ term_id %}
    {% if not loop.last %}
      {% set program_full_list_type = program_full_list_type ~ ',' %} 
    {% endif %}
  {% endfor %}
{% else %}
  {% set program_full_list_type = 'all' %}
{% endif %}

{% if content.field_program_full_list_stream[0] %}
  {% set program_full_list_stream = content.field_program_full_list_stream[0]['#plain_text'] %}
{% else %}
  {% set program_full_list_stream = 'all' %}
{% endif %}

{% set filter_display = not paragraph.field_program_full_list_show_fil.isEmpty() ? paragraph.field_program_full_list_show_fil.value : 'enable-filter' %}

{% set view_content = drupal_view('programs_full_list', 'programs_full_list', program_full_list_stream, program_full_list_type, filter_display) %}

{{ kint(view_content) }}

{% include "@organisms/content-views/_view.twig"
  with {
    content: view_content,
  } only
%}