{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set variation = content.field_media_gallery_row_layout[0] ? content.field_media_gallery_row_layout[0]['#markup'] %}
{% set image_style_field = content.field_media_gallery_row_crop[0] ? content.field_media_gallery_row_crop[0]['#markup'] %}

{% set items = [] %}
{% set count = content.field_media_gallery_row_media['#items']|length - 1 %}

{% for i in 0..count %}
  {# Check if there is an image #}
  {% if content.field_media_gallery_row_media[i]['#media'].field_ed_image_image.entity.uri.value %}
    {# Get image path, alt, and image style field #}
    {% set image_file_path = content.field_media_gallery_row_media[i]['#media'].field_ed_image_image.entity.uri.value %}
    {% set image_file_alt = content.field_media_gallery_row_media[i]['#media'].field_ed_image_image.0.alt %}
    {% set image_file_width = content.field_media_gallery_row_media[i]['#media'].field_ed_image_image.0.width %}
    {% set image_file_height = content.field_media_gallery_row_media[i]['#media'].field_ed_image_image.0.height %}

    {# Determine responsive_image_style #}
    {% if image_style_field is not empty %}

      {% if variation == 'row'%}
        {% set responsive_image_style = 'media_gallery_row_' ~ image_style_field %}
      {% else %}
        {% if i == 0 or i == 1 %}
          {% set responsive_image_style = 'media_gallery_small_' ~ image_style_field %}
        {% else %}
          {% set responsive_image_style = 'media_gallery_' ~ image_style_field %}
        {% endif %}
      {% endif %}
    
    {% else %}
      {% set responsive_image_style = 'card_scale_width' %}
    {% endif %}

    {% if responsive_image_style %}
      {# Create responsive image #}
      {% set image = drupal_image(image_file_path, responsive_image_style, {'alt': 'Thumbnail Image for ' ~ image_file_alt, 'width': image_file_width, 'height': image_file_height}, responsive=true) %}

      {# Append image to image_items array #}
      {% set items = items|merge([image]) %}
    {% endif %}

  {% elseif content.field_media_gallery_row_media[i]['#media'].field_ed_video_oembed_video %}
    {# Append video to image_items array #}
    {% set video_url = content.field_media_gallery_row_media[i]['#media'].field_ed_video_oembed_video.value %}
    {% set video_name = content.field_media_gallery_row_media[i]['#media'].name.value %}

    {% if 'youtube.com' in video_url or 'youtu.be' in video_url %}
      {% set video_id = video_url|split('v=')[1] %}
      {% set thumbnail_url = 'https://img.youtube.com/vi/' ~ video_id ~ '/maxresdefault.jpg' %}

    {# Check if it's a Vimeo video (basic check) #}
    {% elseif 'vimeo.com' in video_url %}
      {% set image_uri = content.field_media_gallery_row_media[i]['#media'].thumbnail.entity.fileuri %}
      {% set thumbnail_url = file_url(image_uri) %}
    {% endif %}

    {% set video_item = {'url': video_url, 'thumbnail': thumbnail_url, 'name': video_name} %}
    {% set items = items|merge([video_item]) %}

  {% endif %}
{% endfor %}

{{ attach_library('utmusic/magnific-popup') }}

{% include "@molecules/media-gallery/media-gallery-item.twig" with {
    unpublished: unpublished,
    directory: directory,
    items: items,
    variation: variation,
    image_style: image_style_field,
  } only 
%}
