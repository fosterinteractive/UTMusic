<?php

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

use Drupal\block\Entity\Block;
use Drupal\config_pages\Entity\ConfigPages;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\views\Views;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\date_all_day\Utility\DateRangeAllDayHelper;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\mega_menu_builder\MegaMenuBuilder;

/**
 * Implements template_preprocess().
 */
function utmusic_preprocess(&$variables, $hook) {
  // Add base_path variable to all template files.
  $variables['base_path'] = base_path();
  // Get the path to the default theme, which is our frontend theme. We use the
  // default theme so this path is the same when it is used in adminspring.
  $theme_handler = \Drupal::service('theme_handler');
  $theme = $theme_handler->getDefault();
  $theme_info = $theme_handler->listInfo();
  $default_theme_info = $theme_info[$theme];
  $theme_path = $default_theme_info->getPath();
  // Pass the path to the theme as a global variable to all twig files.
  // e.g. 'themes/my-theme'
  $variables['directory'] = $theme_path;

  // Custom site configuration.
  $custom_site_settings = ConfigPages::config('custom_site_settings');

  // Add cache clear if the custom site config page is updated.
  if (!empty($custom_site_settings)) {
    $variables['#cache']['tags'][] = 'config_pages:' . $custom_site_settings->id();
  }

  $current_language = \Drupal::languageManager()
  ->getCurrentLanguage()
  ->getId();

  $variables['current_language'] = $current_language;
}

/**
 * Implements template_preprocess_page().
 */
function utmusic_preprocess_html(&$variables) {
  // Check if page is unpublished (under moderation) flow and add class to body.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $moderation_state = $node->get('moderation_state')->value;
    if ($moderation_state != 'published') {
      $variables['attributes']['class'][] = 'page--moderation-state';
    }
  }
}

/**
 * Implements template_preprocess_page().
 */
function utmusic_preprocess_page(&$variables) {

  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  // Custom site configuration.
  $custom_site_settings = ConfigPages::config('custom_site_settings');

  // Site Facebook URL.
  $variables['site_facebook'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_facebook') && !$custom_site_settings->get('field_site_facebook')->isEmpty() ? $custom_site_settings->get('field_site_facebook')->getString() : NULL;
  // Site Linkedin URL.
  $variables['site_linkedin'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_linkedin') && !$custom_site_settings->get('field_site_linkedin')->isEmpty() ? $custom_site_settings->get('field_site_linkedin')->getString() : NULL;
  // Site Twitter URL.
  $variables['site_twitter'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_twitter') && !$custom_site_settings->get('field_site_twitter')->isEmpty() ? $custom_site_settings->get('field_site_twitter')->getString() : NULL;
  // Site Youtube URL.
  $variables['site_youtube'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_youtube') && !$custom_site_settings->get('field_site_youtube')->isEmpty() ? $custom_site_settings->get('field_site_youtube')->getString() : NULL;
  // Site Instagram URL.
  $variables['site_instagram'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_instagram') && !$custom_site_settings->get('field_site_instagram')->isEmpty() ? $custom_site_settings->get('field_site_instagram')->getString() : NULL;

  $logged_in = $variables['logged_in'] ?? NULL;
  if ($logged_in == TRUE) {
    $variables['#attached']['library'][] = 'utmusic/paragraphs.unpublished';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function utmusic_preprocess_paragraph(array &$variables) {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  $paragraph = $variables['paragraph'];
  $pid = $paragraph->id();
  $paragraph_type = $paragraph->getType();
  $paragraph_view_mode = $variables['view_mode'];

  // Determine if the unpublished class should be added to the paragraph. We set
  // the class of adminspring on the preview view mode so we need to make sure
  // we set it on the default paragraph and avoid setting it 2 times on
  // adminspring.
  $variables['unpublished'] = FALSE;
  if (!$paragraph->isPublished() && $active_theme != 'adminspring') {
    $variables['unpublished'] = TRUE;
  }

  if ($paragraph_view_mode == 'default') {
    if ($paragraph_type == 'accordion_item' || $paragraph_type == 'section_title') {
      $host = \Drupal::request()->getSchemeAndHttpHost();
      $current_path = \Drupal::service('path.current')->getPath();
      $current_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

      $variables['absolute_path'] = $host.$current_alias;
      $variables['relative_path'] = $current_alias;
    }
  }

  // Dynamic block paragraphs.
  $dynamic_block_paragraphs = [
    'news_summary_list_dynamic' => ['type' => 'news'],
    'events_summary_list_dynamic' => ['type' => 'event'],
    'news_featured_item' => ['type' => 'news_featured'],
    'event_featured_item' => ['type' => 'event_featured'],
    // 'programs_full_list_dynamic' => ['type' => 'program_full'],
    'job_listing' => ['type' => 'job_listing']
  ];

  if (isset($dynamic_block_paragraphs[$paragraph_type])) {
    $type = $dynamic_block_paragraphs[$paragraph_type]['type'];
    // Map the fields for the paragraphs.
    $field_mapping = [
      'news' => [
        'title' => 'field_news_title',
        'contextual' => [
          'promote' => 'field_news_promote_filter',
          'category1' => 'field_news_category',
          'category2' => 'field_news_summary_area_study',
        ],
        'number_items' => 'field_news_number_of_items',
        'number_other_items' => 'field_news_other_number_of_items',
        'offset' => 'field_news_offset',
        'layout' => 'field_news_summary_variation',
        'appearance' => 'field_news_summary_appearance',
        'button_url' => 'field_news_summary_button_url',
        'button_label' => 'field_news_summary_button_label',
        'button_a11y' => 'field_news_summary_button_a11y',
      ],
      'news_featured' => [
        'title' =>  null,
        'contextual' => [
          'promote' => 'field_news_featured_promote',
          'category1' => 'field_news_featured_category',
          'category2' => 'field_news_featured_area_study',
        ],
        'number_items' => null,
        'number_other_items' => null,
        'offset' => 'field_news_featured_offset',
      ],
      'event' => [
        'title' => 'field_events_title',
        'contextual' => [
          'promote' => 'field_events_promote',
          'category1' => 'field_events_category',
          'category2' => 'field_event_context_area'
        ],
        'number_items' => 'field_events_number_of_items',
        'number_other_items' => 'field_events_other_number_items',
        'offset' => 'field_events_offset',
        'status' => 'field_events_status',
      ],
      'event_featured' => [
        'title' =>  null,
        'contextual' => [
          'promote' => 'field_event_feature_promote',
          'category1' => 'field_event_type',
          'category2' => 'field_event_area',
        ],
        'number_items' => null,
        'number_other_items' => null,
        'offset' => 'field_event_offset',
      ],
      // 'program_full' => [
      //   'title' => null,
      //   'contextual' => [
      //     'category1' => 'field_program_full_list_stream',
      //     'category2' => 'field_program_full_list_type',
      //   ],
      //   'show_filter' => 'field_program_full_list_show_fil',
      //   'number_items' => null,
      //   'number_other_items' => null,
      //   'offset' => null,
      //   'status' => null,
      // ],
      'job_listing' => [
        'title' => null,
        'contextual' => [
          'category1' => 'field_job_listing_category',
        ],
        'number_items' => 'field_job_listing_num_items',
        'number_other_items' => 'field_job_listing_other_num',
        'offset' => 'field_job_listing_offset',
      ],
    ];

    // Set the dynamic title for the view.
    $dynamic_title = $paragraph->hasField($field_mapping[$type]['title']) && !$paragraph->{$field_mapping[$type]['title']}->isEmpty() ? $paragraph->{$field_mapping[$type]['title']}->value : '';

    // Set the number of items.
    $number_items_value = $paragraph->hasField($field_mapping[$type]['number_items']) && !$paragraph->{$field_mapping[$type]['number_items']}->isEmpty() ? $paragraph->{$field_mapping[$type]['number_items']}->value : NULL;
    $other_number_items_value = $paragraph->hasField($field_mapping[$type]['number_other_items']) && !$paragraph->{$field_mapping[$type]['number_other_items']}->isEmpty() ? $paragraph->{$field_mapping[$type]['number_other_items']}->value : NULL;

    //Set the offset.
    $offset = $paragraph->hasField($field_mapping[$type]['offset']) && !$paragraph->{$field_mapping[$type]['offset']}->isEmpty() ? $paragraph->{$field_mapping[$type]['offset']}->value : NULL;

    //Show Filter
    if (isset($field_mapping[$type]['show_filter'])) {
      $show_filter = $paragraph->hasField($field_mapping[$type]['show_filter']) && !$paragraph->{$field_mapping[$type]['show_filter']}->isEmpty() ? $paragraph->{$field_mapping[$type]['show_filter']}->value : NULL;
    }

    // Determine the number of news items to display.
    $number_items = 0;
    if ($number_items_value && $number_items_value == 'other') {
      $number_items = $other_number_items_value;
    }
    elseif ($number_items_value) {
      $number_items = $number_items_value;
    }

    // Set the contextual filters. These filters are setup to be the 1st
    // argument on the view and multiple fields (taxonomies) are combined.
    $categories = [];

    foreach ($field_mapping[$type]['contextual'] as $field_type => $field) {
      $contextual_filters = $paragraph->hasField($field) && !$paragraph->{$field}->isEmpty() ? $paragraph->{$field}->getValue() : NULL;

      $arg = 'all';
      $category_ids = '';
      // If the contextual filters are not empty 
      if (!empty($contextual_filters)) {
        foreach ($contextual_filters as $filter) {
          $id = $filter['target_id'];
          $category_ids .= $id . '+';
        }
        $arg = substr($category_ids, 0, -1);
      // if the contextual filters are empty
      } 

      $categories[$field_type] = $arg;
    }

    if (in_array($paragraph_view_mode, ['preview', 'full', 'default'])) {
      // Creates render variables to use in template.
      if ($paragraph_type == 'news_summary_list_dynamic') {
        //pass view-more link from admin UI
        $button_uri = $paragraph->hasField($field_mapping[$type]['button_url']) && !$paragraph->{$field_mapping[$type]['button_url']}->isEmpty() ? $paragraph->{$field_mapping[$type]['button_url']}->uri : NULL;
        if (isset($button_uri) && (Url::fromUri($button_uri )->isExternal())) {
          // For external urls.
          $button_url = $button_uri ;
        } 
        elseif (isset($button_uri)) {
          // For internal urls.
          $button_url = Url::fromUri($button_uri )->setAbsolute()->toString();
        }
        else {
          $button_url = NULL;
        }
        
        $button_label = $paragraph->hasField($field_mapping[$type]['button_label']) && !$paragraph->{$field_mapping[$type]['button_label']}->isEmpty() ? $paragraph->{$field_mapping[$type]['button_label']}->value : NULL;
        $button_a11y = $paragraph->hasField($field_mapping[$type]['button_a11y']) && !$paragraph->{$field_mapping[$type]['button_a11y']}->isEmpty() ? $paragraph->{$field_mapping[$type]['button_a11y']}->value : NULL;

        $layout = $paragraph->hasField($field_mapping[$type]['layout']) && !$paragraph->{$field_mapping[$type]['layout']}->isEmpty() ? $paragraph->{$field_mapping[$type]['layout']}->value : NULL;
        $appearance = $paragraph->hasField($field_mapping[$type]['appearance']) && !$paragraph->{$field_mapping[$type]['appearance']}->isEmpty() ? $paragraph->{$field_mapping[$type]['appearance']}->value : NULL;

        if ($appearance == 'listing-item') {
          $variables['content']['news_summary_list'] = utmusic_return_rendered_view('news_full_list', 'news_summary_list_images', $number_items, $categories,  $dynamic_title, $offset, $layout, $button_url, $button_label, $button_a11y);
        } else {
          $variables['content']['news_summary_list'] = utmusic_return_rendered_view('news_full_list', 'news_summary_list', $number_items, $categories,  $dynamic_title, $offset, $layout, $button_url, $button_label, $button_a11y);
        }

      }
      elseif ($paragraph_type == 'news_featured_item') {
        $variables['content']['news_featured_item'] = utmusic_return_rendered_view('news_full_list', 'news_featured_item', null , $categories,  $dynamic_title, $offset);
      }
      elseif ($paragraph_type == 'events_summary_list_dynamic') {
        $status = $paragraph->hasField($field_mapping[$type]['status']) && !$paragraph->{$field_mapping[$type]['status']}->isEmpty() ? $paragraph->{$field_mapping[$type]['status']}->value : NULL;

        if ($status == 'upcoming') {
          $variables['content']['events_summary_list_upcoming'] = utmusic_return_rendered_view('events_full_list', 'events_summary_list_upcoming', $number_items, $categories, $dynamic_title, $offset, NULL, NULL, NULL, NULL, NULL, 'paragraph:' . $pid);
        } else {
          $variables['content']['events_summary_list_past'] = utmusic_return_rendered_view('events_full_list', 'events_summary_list_past', $number_items, $categories,  $dynamic_title, $offset, NULL, NULL, NULL, NULL, NULL, 'paragraph:' . $pid);
        }
      }
      elseif ($paragraph_type == 'event_featured_item') {
        $variables['content']['event_featured_item'] = utmusic_return_rendered_view('events_full_list', 'events_featured_item', null , $categories, $dynamic_title, $offset);
      }
      // elseif ($paragraph_type == 'programs_full_list_dynamic') {
      //   $variables['content']['programs_full_list_dynamic'] = utmusic_return_rendered_view('programs_full_list', 'programs_full_list', null , $categories, null, null, $show_filter);
      // }
      elseif ($paragraph_type == 'job_listing') {
        $variables['content']['job_listing_block'] = utmusic_return_rendered_view('jobs_full_list', 'job_listing_block', $number_items , $categories, null, $offset);
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function utmusic_preprocess_node(array &$variables) {
  // Get Node.
  $node = $variables['node'];    
  // Get Node Type.
  $node_type = $node->getType();
  // Get Node View.
  $node_view_mode = $variables['view_mode'];
  // Get Node ID.
  $node_id = $node->id();

  // If event CT.
  if ($node_type == 'event') {
    if ($node_view_mode == 'full') {
      // Get View, set number of items to display and filters.
      $filtered_view = Views::getView('events_full_list');
      $filtered_view->setDisplay('related_events_footer');
      $filtered_view->setItemsPerPage(4);

      // Render filtered view.
      $render_view = $filtered_view->render();

      $variables['content']['related_event_footer'] = $render_view;
    }
  }

  // News CT
  if ($node_type == 'news') {
    if ($node_view_mode == 'full') {
      // Get View, set number of items to display and filters.
      $filtered_view = Views::getView('news_full_list');
      $filtered_view->setDisplay('related_news_footer');
      $filtered_view->setItemsPerPage(4);

      // Render filtered view.
      $render_view = $filtered_view->render();

      $variables['content']['related_news_footer'] = $render_view;
    }
  }

  // People
  if ($node_type == 'people') {
    if ($node_view_mode == 'full') {
      if (isset($variables['elements']['field_people_research_profile'][0])) {
        $research_url_og_value = $variables['elements']['field_people_research_profile'][0]['#title'];
        
        // Regular expression to match the domain
        $pattern_domain = '/^https:\/\/discover\.research\.utoronto\.ca\//';
        // Regular expression pattern to match the endings
        $pattern_ending = '/(\/about|\/publications|\/professional|\/teaching)$/';

        // Check if the string ends with any of the specified endings
        if (preg_match($pattern_ending, $research_url_og_value, $matches)) {
          // Get the matched ending (e.g., "/about", "/publications", etc.)
          $matchedEnding = $matches[1];

          // Remove the matched ending from the input string
          $research_url_new_value = preg_replace($pattern_ending, '', $research_url_og_value);
        } else {
          $research_url_new_value = $research_url_og_value;
        }

        $variables['research_url'] = $research_url_new_value;       
      }

      if ((isset($variables['elements']['field_people_enable_media']))&&$variables['elements']['field_people_enable_media']['0']['#markup'] == 'view' ) {
        $variables['content']['media_related_people'] = utmusic_return_rendered_view('media_related_to_content', 'media_related_people');
      }
    }
  }

  //Program
  if ($node_type == 'program') {
    if ($node_view_mode == 'full') {
      if ((isset($variables['elements']['field_program_enable_media']))&&$variables['elements']['field_program_enable_media']['0']['#markup'] == 'view' ) {
        $variables['content']['media_related_program'] = utmusic_return_rendered_view('media_related_to_content', 'media_related_program');
      }

      $variables['content']['people_related_to_programs'] = utmusic_return_rendered_view('people_full_list', 'people_related_to_programs');
    }
  }
}



/**
 * Implements hook_preprocess_views().
 */
function utmusic_preprocess_views_view_unformatted(array &$variables) {
  $view = $variables['view'];
  $view_id = $view->id();

  $dynamic_blocks = [
    'news_summary_list' => 'field_news_listing_link',
    'ed_dynamic_events_upcoming' => 'field_events_listing_link',
    'ed_dynamic_events_past' => 'field_events_past_listing_link',
  ];
  // Generate the dynamic blocks See All buttons at the bottom of the list.
  // We are using config pages custom config to allow the links to be
  // customizable by the end user instead of hardcoding their values.
  if (isset($dynamic_blocks[$view_id])) {
    // Custom site configuration.
    $custom_site_settings = ConfigPages::config('custom_site_settings');
    $field = $dynamic_blocks[$view_id];

    $variables['view_all_link_title'] = NULL;
    $variables['view_all_link_url'] = NULL;
    $link = !empty($custom_site_settings) && !$custom_site_settings->get($field)->isEmpty() ? $custom_site_settings->get($field)->first() : NULL;

    // If there is a link set in the custom site settings get the title and the
    // URL.
    if (!empty($link)) {
      $values = $link->getValue();

      $variables['view_all_link_title'] = !empty($values['title']) ? $values['title'] : NULL;

      $url = $link->getUrl();
      // If there is a category set for the argument then use that to pass to
      // the full listing page.
      if (
        !$url->isExternal() &&
        $url->isRouted() &&
        !empty($view->args[0]) &&
        $view->args[0] != 'all'
      ) {
        $categories = explode('+', $view->args[0]);
        // Only append the category if it's one item otherwise show all.
        if (count($categories) == 1) {
          $url->setRouteParameter('category', $view->args[0]);
        }
      }
      $variables['view_all_link_url'] = $url->toString();
    }
  }
}

/**
 * Implements hook_preprocess_toolbar().
 */
function utmusic_preprocess_toolbar(&$variables) {
  $variables['#attached']['library'][] = 'utmusic/toolbar';
}

/**
 * implements hook_preprocess_breadcrumb().
 */
function utmusic_preprocess_breadcrumb(&$variables) {
  $node = utmusic_get_node_from_route();
  if ($node) {
    $variables['#cache']['tags'][] = 'node:' . $node->id();
  }
  
  $variables['#cache']['contexts'][] = 'url';
} 

/**
 * Renders a view.
 *
 * used to render a view allowing us to pass contextual arguments to the view.
 */
function utmusic_return_rendered_view($view, $display, $items = NULL, $categories = [], $title = NULL, $offset = NULL, $layout = NULL, $button_url = NULL, $button_label = NULL, $button_a11y = NULL, $show_filter = NULL, $cache_key = NULL) {
  $args = [];

  if (isset($categories['promote'])) {
    $args[] = $categories['promote'];
  }

  if (isset($categories['category1'])) {
    $args[] = $categories['category1'];
  }

  if (isset($categories['category2'])) {
    $args[] = $categories['category2'];
  }

  $args = array_merge($args, [
    $items,
    $title,
    $layout,
    $button_url,
    $button_label,
    $button_a11y,
    $show_filter
  ]);
  
  // Get View, set number of items to display and filters.
  $filtered_view = Views::getView($view);
  $filtered_view->setDisplay($display);
  $filtered_view->setItemsPerPage($items);
  $filtered_view->setArguments($args);
  $filtered_view->setOffset($offset);
  
  // Render filtered view.
  $render_view = $filtered_view->render();

  // Add the cache key, which will most likley be a paragraph id to keep the
  // cache's unique.
  if ($cache_key) {
    $render_view['#cache']['keys'][] = $cache_key;
    $render_view['#cache']['tags'][] = $cache_key;
  }

  return $render_view;
}


/**
 * Returns the current node.
 *
 * Supports the standard node page, node previews and revisions. Use this
 * function instead of the node available in preprocess_page or preprocess_node
 * as this will return return the correct node when viewing a node, revision or
 * preview.
 *
 * @return \Drupal\node\NodeInterface
 *   The node.
 */
function utmusic_get_node_from_route() {
  $node = NULL;

  if (\Drupal::routeMatch()->getParameter('node_revision')) {
    return \Drupal::routeMatch()->getParameter('node_revision');
  }

  if (\Drupal::routeMatch()->getParameter('node')) {
    return \Drupal::routeMatch()->getParameter('node');
  }

  if (\Drupal::routeMatch()->getParameter('node_preview')) {
    return \Drupal::routeMatch()->getParameter('node_preview');
  }

  return $node;
}

/**
 * Implements hook_form_alter().
 */
function utmusic_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  // Add the adminspring overrides to the forms that use the adminspring theme.
  if ($active_theme == 'adminspring') {
    // Ad the css variable colors to the form.
    $form['#attached']['library'][] = 'utmusic/adminspring';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function utmusic_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $suggestions = menu_block_theme_suggestions_menu($variables);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Exposed Views Filters Form.
 */
function utmusic_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_id = $form['#id'];
  $storage = $form_state->getStorage();
  $view = $storage['view'] ?? NULL;

  // View 'news_full_list' - aply 'select2_all' module 
  $form['news_category']['#options']['All'] = t('All');
  // $form['news_category']['#select2'] = ['allowClear' => FALSE];
  $form['news_category']['#attributes']['class'][] = 'm-input';

  $form['area_study']['#options']['All'] = t('All');
  // $form['area_study']['#select2'] = ['allowClear' => FALSE];
  $form['area_study']['#attributes']['class'][] = 'm-input';

  // If the exposed form is for the full programs full list
  if ($form_id == 'views-exposed-form-programs-full-list-programs-full-list') {
    $field = 'program_type';

    if (isset($form[$field])) {
      $limited_args = [];
      if (isset($view->args[1]) && $view->args[1] !== 'all') {
        $limited_args = explode(",", $view->args[1]);
      }

      $filtered_options = ["All" => "- Any -"];
      $options = $form[$field]['#options'];

      foreach ($options as $index => $option) {
        if ($index === 'All') {
          $filtered_options[$index] = $option;
        } else {
          $tid = key($option->option);
          $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);

          if (!empty($limited_args)) {
            if (in_array($tid, $limited_args)) {
              $filtered_options[$index] = $option;
            }
          }
          else {
            $filtered_options[$index] = $option;
          }
        }
      }

      $filter_display = $view->args[2] ?? NULL;

      if ($filter_display == 'hide-filter') {
        $form[$field]['#access'] = FALSE;
      }

      $form[$field]['#size'] = NULL;
      $form[$field]['#multiple'] = FALSE;
      $form[$field]['#options'] = $filtered_options;
    }
  }
}

function utmusic_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-','_', $variables['element']['#id']);
}

/**
 * Implements template_preprocess_menu().
 */
function utmusic_preprocess_menu(&$variables) {

  // Main menu (Desktop).
  if (
    $variables['menu_name'] == 'main' &&
    isset($variables['menu_block_configuration']['suggestion']) && 
    $variables['menu_block_configuration']['suggestion'] == 'main'
  ) {
    // Mega menu builder service
    $mega_menu_builder = \Drupal::service('mega_menu_builder.builder');
    // Menu items.
    $items = $variables['items'];
    // Loop over each menu item to build it's mega menu.
    foreach ($items as $level1_menu_id => $item) {
      // Decide here how many columns this level 1 menu item should be.
      // Logic would be based off of if there is a panel or not.

      // Load the full entity.
      $menu_link_content = \Drupal\menu_link_content\Entity\MenuLinkContent::load($item['original_link']->getMetaData()['entity_id']);

      if ($menu_link_content instanceof \Drupal\menu_link_content\Entity\MenuLinkContent) {
        $field_menu_promotional_panel_value = $menu_link_content->get('field_menu_promotional_panel')->value;
        
        if ($field_menu_promotional_panel_value) {
          $cols = 3;
        }
        else {
          $cols = 4;
        }
      }

      $columns_data = $mega_menu_builder->build($item, $cols);
      // Add the mega menu columns data to the level 1 item.
      $items[$level1_menu_id]['columns_data'] = $columns_data;
    }

    $variables['items'] = $items;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function utmusic_preprocess_field(&$variables) {
  if ($variables['field_name'] == 'field_media_file') {
    // Get the file entity.
    $file_entity = $variables['items'][0]['content']['#file'];

    if ($file_entity) {
      // Get the file size.
      $variables['file_size'] = format_size($file_entity->getSize());

      // Get the file extension.
      $variables['file_extension'] = pathinfo($file_entity->getFileUri(), PATHINFO_EXTENSION);

      // Get the link to the file.
      $uri = $file_entity->getFileUri();
      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
      $variables['link'] = $url;
      
      // Query the media entity referencing this file.
      $media_ids = \Drupal::entityQuery('media')
        ->accessCheck(TRUE)
        ->condition('field_media_file.target_id', $file_entity->id())
        ->execute();
        
      if (!empty($media_ids)) {
        $media_id = reset($media_ids);
        $media = \Drupal::entityTypeManager()->getStorage('media')->load($media_id);

        // Get the media name.
        $variables['media_name'] = $media->getName();
      }
    }
  }

  if ($variables['element']['#field_name'] == 'field_media_link') {
    $media_entity = $variables['element']['#object'];
    if ($media_entity instanceof \Drupal\media\MediaInterface) {
        $variables['media_name'] = $media_entity->getName();
    }
  }

}

