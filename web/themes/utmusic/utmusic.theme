<?php

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

use Drupal\block\Entity\Block;
use Drupal\config_pages\Entity\ConfigPages;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\views\Views;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\date_all_day\Utility\DateRangeAllDayHelper;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use \Drupal\node\Entity\Node;

/**
 * Implements template_preprocess().
 */
function utmusic_preprocess(&$variables, $hook) {
  // Add base_path variable to all template files.
  $variables['base_path'] = base_path();

  // Custom site configuration.
  $custom_site_settings = ConfigPages::config('custom_site_settings');

  // Add cache clear if the custom site config page is updated.
  if (!empty($custom_site_settings)) {
    $variables['#cache']['tags'][] = 'config_pages:' . $custom_site_settings->id();
  }

  $current_language = \Drupal::languageManager()
  ->getCurrentLanguage()
  ->getId();

  $variables['current_language'] = $current_language;
}

/**
 * Implements template_preprocess_page().
 */
function utmusic_preprocess_html(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  // Custom site configuration.
  $custom_site_settings = ConfigPages::config('custom_site_settings');

  // Site Custom Script.
  $variables['site_custom_script'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_custom_scripts') && !$custom_site_settings->get('field_site_custom_scripts')->isEmpty() ? $custom_site_settings->get('field_site_custom_scripts')->first()->getValue()['value'] : NULL;
}

/**
 * Implements template_preprocess_page().
 */
function utmusic_preprocess_page(&$variables) {

  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  // Custom site configuration.
  $custom_site_settings = ConfigPages::config('custom_site_settings');

  $variables['site_logo_image_url'] = NULL;
  $variables['site_logo_image_width'] = NULL;
  $variables['site_logo_image_height'] = NULL;
  if (!empty($custom_site_settings) && $custom_site_settings->hasField('field_site_logo') && !$custom_site_settings->get('field_site_logo')->isEmpty()) {
    $image_values = $custom_site_settings->get('field_site_logo')->first()->getValue();
    $fid = $image_values['target_id'];
    $file = File::load($fid);
    $variables['site_logo_image_url'] = $file->createFileUrl();
    $variables['site_logo_image_width'] = $image_values['width'];
    $variables['site_logo_image_height'] = $image_values['height'];
  }

  // Custom site slogan.
  $variables['site_slogan'] = NULL;
  $site_slogan = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_slogan') && !$custom_site_settings->get('field_site_slogan')->isEmpty() ? $custom_site_settings->get('field_site_slogan')->first()->getValue() : NULL;
  if ($site_slogan) {
    $variables['site_slogan'] = [
      '#type' => 'processed_text',
      '#text' => $site_slogan['value'],
      '#format' => $site_slogan['format'],
    ];
  }

  // Custom site footer text.
  $variables['site_footer'] = NULL;
  $site_footer = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_footer') && !$custom_site_settings->get('field_site_footer')->isEmpty() ? $custom_site_settings->get('field_site_footer')->first()->getValue() : NULL;
  if ($site_footer) {
    $variables['site_footer'] = [
      '#type' => 'processed_text',
      '#text' => $site_footer['value'],
      '#format' => $site_footer['format'],
    ];
  }

  // Site Facebook URL.
  $variables['site_facebook'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_facebook') && !$custom_site_settings->get('field_site_facebook')->isEmpty() ? $custom_site_settings->get('field_site_facebook')->getString() : NULL;
  // Site Linkedin URL.
  $variables['site_linkedin'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_linkedin') && !$custom_site_settings->get('field_site_linkedin')->isEmpty() ? $custom_site_settings->get('field_site_linkedin')->getString() : NULL;
  // Site Twitter URL.
  $variables['site_twitter'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_twitter') && !$custom_site_settings->get('field_site_twitter')->isEmpty() ? $custom_site_settings->get('field_site_twitter')->getString() : NULL;
  // Site Youtube URL.
  $variables['site_youtube'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_youtube') && !$custom_site_settings->get('field_site_youtube')->isEmpty() ? $custom_site_settings->get('field_site_youtube')->getString() : NULL;
  // Site Instagram URL.
  $variables['site_instagram'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_instagram') && !$custom_site_settings->get('field_site_instagram')->isEmpty() ? $custom_site_settings->get('field_site_instagram')->getString() : NULL;


  // Student Assistance
  $variables['student_assistance_url'] = NULL;
  $variables['student_assistance_theme'] = NULL;
  $variables['student_assistance_label'] = NULL;
  if (
    !empty($custom_site_settings) && 
    $custom_site_settings->hasField('field_site_student_assist_enable') &&
    !$custom_site_settings->get('field_site_student_assist_enable')->isEmpty() &&
    $custom_site_settings->get('field_site_student_assist_enable')->value == 1
  ) {
    if (!empty($custom_site_settings) && $custom_site_settings->hasField('field_site_student_assist_link') && !$custom_site_settings->get('field_site_student_assist_link')->isEmpty()) {
      $student_assistance_label = $custom_site_settings->get('field_site_student_assist_link')->first()->getValue()['title'];
      $variables['student_assistance_label'] = !empty($student_assistance_label) ? $student_assistance_label : t('Student Assistance');
      $variables['student_assistance_url'] = $custom_site_settings->get('field_site_student_assist_link')->first()->getUrl()->toString();
    }
    $variables['student_assistance_theme'] = !empty($custom_site_settings) && $custom_site_settings->hasField('field_site_student_assist_theme') && !$custom_site_settings->get('field_site_student_assist_theme')->isEmpty() ? $custom_site_settings->get('field_site_student_assist_theme')->value : NULL;
  }
}

/**
 * Implements template_preprocess_image().
 */
function utmusic_preprocess_image(&$variables) {
  // Checks for data-load attr.
  if (isset($variables['attributes']['data-load'])) {
    // Check if the lazyload should be done with tiny-slider.
    if ($variables['attributes']['data-load'] == 'tiny_slider') {
      // Attaches tiny_slider "tinyslider.js" library.
      $variables['#attached']['library'][] = 'utmusic/tiny_slider';
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function utmusic_preprocess_paragraph(array &$variables) {
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();
  $paragraph_view_mode = $variables['view_mode'];

  // Dynamic block paragraphs.
  $dynamic_block_paragraphs = [
    'news_summary_list_dynamic' => ['type' => 'news'],
    'events_summary_list_dynamic' => ['type' => 'event'],
    'news_featured_item' => ['type' => 'news_featured'],
  ];

  if (isset($dynamic_block_paragraphs[$paragraph_type])) {
    $type = $dynamic_block_paragraphs[$paragraph_type]['type'];
    // Map the fields for the paragraphs.
    $field_mapping = [
      'news' => [
        'title' => 'field_news_title',
        'contextual' => [
          'promote' => 'field_news_promote_filter',
          'category1' => 'field_news_category',
          'category2' => 'field_news_summary_area_study',
        ],
        'number_items' => 'field_news_number_of_items',
        'number_other_items' => 'field_news_other_number_of_items',
        'offset' => 'field_news_offset',
        'layout' => 'field_news_summary_variation',
        'appearance' => 'field_news_summary_appearance',
      ],
      'news_featured' => [
        'title' =>  null,
        'contextual' => [
          'promote' => 'field_news_featured_promote',
          'category1' => 'field_news_featured_category',
          'category2' => 'field_news_featured_area_study',
        ],
        'number_items' => null,
        'number_other_items' => null,
        'offset' => 'field_news_featured_offset',
      ],
      'event' => [
        'title' => 'field_events_title',
        'contextual' => 'field_events_category',
        'number_items' => 'field_events_number_of_items',
        'number_other_items' => 'field_events_other_number_items',
        'promote' => 'field_events_promote',
        'offset' => 'field_events_offset',
      ],
    ];

    // Set the dynamic title for the view.
    $dynamic_title = $paragraph->hasField($field_mapping[$type]['title']) && !$paragraph->{$field_mapping[$type]['title']}->isEmpty() ? $paragraph->{$field_mapping[$type]['title']}->value : '';

    // Set the number of items.
    $number_items_value = $paragraph->hasField($field_mapping[$type]['number_items']) && !$paragraph->{$field_mapping[$type]['number_items']}->isEmpty() ? $paragraph->{$field_mapping[$type]['number_items']}->value : NULL;
    $other_number_items_value = $paragraph->hasField($field_mapping[$type]['number_other_items']) && !$paragraph->{$field_mapping[$type]['number_other_items']}->isEmpty() ? $paragraph->{$field_mapping[$type]['number_other_items']}->value : NULL;

    //Set the offset.
    $offset = $paragraph->hasField($field_mapping[$type]['offset']) && !$paragraph->{$field_mapping[$type]['offset']}->isEmpty() ? $paragraph->{$field_mapping[$type]['offset']}->value : NULL;

    // Determine the number of news items to display.
    $number_items = 0;
    if ($number_items_value && $number_items_value == 'other') {
      $number_items = $other_number_items_value;
    }
    elseif ($number_items_value) {
      $number_items = $number_items_value;
    }

    // Set the contextual filters. These filters are setup to be the 1st
    // argument on the view and multiple fields (taxonomies) are combined.
    $categories = [];

    foreach ($field_mapping[$type]['contextual'] as $field_type => $field) {
      $contextual_filters = $paragraph->hasField($field) && !$paragraph->{$field}->isEmpty() ? $paragraph->{$field}->getValue() : NULL;

      $arg = 'all';
      $category_ids = '';
      if (!empty($contextual_filters)) {
        foreach ($contextual_filters as $filter) {
          $id = $filter['target_id'];
          $category_ids .= $id . '+';
        }
        $arg = substr($category_ids, 0, -1);
      }

      $categories[$field_type] = $arg;
    }

    if (in_array($paragraph_view_mode, ['preview', 'full', 'default'])) {
      // Creates render variables to use in template.
      if ($paragraph_type == 'news_summary_list_dynamic') {
        $layout = $paragraph->hasField($field_mapping[$type]['layout']) && !$paragraph->{$field_mapping[$type]['layout']}->isEmpty() ? $paragraph->{$field_mapping[$type]['layout']}->value : NULL;
        $appearance = $paragraph->hasField($field_mapping[$type]['appearance']) && !$paragraph->{$field_mapping[$type]['appearance']}->isEmpty() ? $paragraph->{$field_mapping[$type]['appearance']}->value : NULL;

        if ($appearance == 'listing-item') {
          $variables['content']['news_summary_list'] = utmusic_return_rendered_view('news_full_list', 'news_summary_list_images', $number_items, $categories,  $dynamic_title, $offset, $layout);
        } else {
          $variables['content']['news_summary_list'] = utmusic_return_rendered_view('news_full_list', 'news_summary_list', $number_items, $categories,  $dynamic_title, $offset, $layout);
        }

      }
      elseif ($paragraph_type == 'news_featured_item') {
        $variables['content']['news_featured_item'] = utmusic_return_rendered_view('news_full_list', 'news_featured_item', null , $categories,  $dynamic_title, $offset);
      }
      elseif ($paragraph_type == 'events_summary_list_dynamic') {
        // $variables['content']['events_summary_list_past'] = utmusic_return_rendered_view('events_full_list', 'events_summary_list_upcoming', $number_items, $categories, $promote, $dynamic_title, $offset);
        // $variables['content']['events_summary_list_upcoming'] = utmusic_return_rendered_view('events_full_list', 'events_summary_list_upcoming', $number_items, $categories, $promote, $dynamic_title, $offset);
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function utmusic_preprocess_node(array &$variables) {
  // Get Node.
  $node = $variables['node'];    
  // Get Node Type.
  $node_type = $node->getType();
  // Get Node View.
  $node_view_mode = $variables['view_mode'];
  // Get Node ID.
  $node_id = $node->id();

  // If event CT.
  if ($node_type == 'event') {
    // Check if date field exists.
    // Get Node 
    $node = $variables['node'];     
    
    $node_route = \Drupal::routeMatch()->getParameter('node');
    if ($node_route instanceof \Drupal\node\NodeInterface) {
      // You can get nid and anything else you need from the node object.
      $variables['current_id'] = $node_route->id();
    }

    $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $list_node = Node::load(17)->getTranslation($lang_code)->toArray();

    $variables['lang_code'] = $lang_code;
    $variables['event_list_path'] = $list_node['path'][0]['alias'];

    // check if date field exists
    if (!empty($variables['elements']['field_event_date'])) { 
      $formatter = \Drupal::service('date.formatter');
      $date_now = new DateTime();

      $event_date_values = $variables['elements']['field_event_date']['#object']->get('field_event_date')->getValue()[0];
      $date_start = $event_date_values['value'];
      $date_end = $event_date_values['end_value'];

      // Check if there is an end date
      if ($date_end == NULL) {
        // If there is not end date - make end date equal to start date
        $date_end = $date_start;
      }

      $end_date_object = new DateTime($date_end);
      $variables['is_past_event'] = 0;
      if ($end_date_object < $date_now) {
        $variables['is_past_event'] = 1;
      }
      
      // If the start and end date are equal
      if ($date_start == $date_end) {
        // set end_time null (won't show)
        $variables['end_time'] = NULL;
      } else {
        // Set end_time
        $end_time = strtotime($date_end.' UTC');
        $variables['end_time'] = $formatter->format($end_time, 'custom', 'g:ia');
      }
      
      // Determine if the event is all day or not.
      $variables['all_day'] = FALSE;
      if (empty($node->field_event_date->end_value)) {
        $variables['all_day'] = TRUE;
        // set start_time null (won't show)
        $variables['start_time'] = NULL;
      }
      elseif (!empty($node->field_event_date->value) && !empty($node->field_event_date->end_value)) {
        // Set start_time
        $start_time = strtotime($date_start.' UTC');
        $variables['start_time'] = $formatter->format($start_time, 'custom', 'g:ia');

        $item = [
          'value' => new DrupalDateTime($node->field_event_date->value, DateTimeItemInterface::STORAGE_TIMEZONE),
          'end_value' => new DrupalDateTime($node->field_event_date->end_value, DateTimeItemInterface::STORAGE_TIMEZONE)
        ];
        $variables['all_day'] = DateRangeAllDayHelper::isAllDay($item);
      }
    }

    if (in_array($node_view_mode, ['full', 'event_confirmation'])) {
      // If this event is part of a series we need to determine it's number in
      // the series which should be determined chronological.
      $variables['total_events_in_series'] = NULL;
      $variables['event_position_in_series'] = NULL;
      if (!$node->field_event_series->isEmpty()) {
        $langcode = $node->language()->getId();
        $series_id = $node->field_event_series->target_id;
        $node_storage = \Drupal::entityTypeManager()->getStorage('node');
        // Get all events in this series.
        $nids = $node_storage->getQuery()
          ->condition('type', 'event')
          ->condition('status', 1)
          ->condition('field_event_series', $series_id)
          ->condition('langcode', $langcode, '=')
          ->sort('field_event_date.value', 'ASC')
          ->sort('nid', 'ASC')
          ->execute();
        // Get the count of all the events.
        $variables['total_events_in_series'] = count($nids);
        // Loop through the event ids to find what position this current event is
        // in the list of series.
        $position = 0;
        $i = 1;
        foreach ($nids as $id) {
          if ($node_id == $id) {
            $position = $i;
            break;
          }
          $i++;
        }
        // Add the postion as a varaiable.
        $variables['event_position_in_series'] = $position;
      }
    }
  }
  // Event series.
  if ($node_type == 'event_series') {

    if ($node_view_mode == 'event_confirmation') {
      $langcode = $node->language()->getId();
      $node_storage = \Drupal::entityTypeManager()->getStorage('node');
      // Get all events in this series.
      $nids = $node_storage->getQuery()
        ->condition('type', 'event')
        ->condition('status', 1)
        ->condition('field_event_series', $node_id)
        ->condition('langcode', $langcode, '=')
        ->sort('field_event_date.value', 'ASC')
        ->sort('nid', 'ASC')
        ->execute();
      // Get the count of all the events.
      $variables['total_events_in_series'] = count($nids);
    }
  }

  // Event confirmation used on event and event series.
  if ($node_view_mode == 'event_confirmation') {
    $first_name = \Drupal::request()->query->get('first_name');
    $variables['first_name'] = $first_name;
    $variables['upcoming_events_in_series'] = 0;
    // Need to get the current date in drupals storage format so we can filter
    // events that have expired.
    $date = new DrupalDateTime('now');
    $date->setTimezone(new \DateTimezone(DateTimeItemInterface::STORAGE_TIMEZONE));
    $formatted = $date->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);
    // Query event nodes which are in this series which have not yet expired
    // sorted chronologically.
    $series_id = NULL;
    if ($node_type == 'event_series') {
      $series_id = $node_id;
    }
    else {
      if (!$node->field_event_series->isEmpty()) {
        $series_id = $node->field_event_series->target_id;
      }
    }

    if ($series_id) {
      $langcode = $node->language()->getId();
      $nids = $node_storage->getQuery()
        ->condition('type', 'event')
        ->condition('status', 1)
        ->condition('field_event_series', $series_id)
        ->condition('field_sales_force_id', NULL, 'IS NOT NULL')
        ->condition('field_event_date.value', $formatted, '>=')
        ->condition('langcode', $langcode, '=')
        ->sort('field_event_date.value', 'ASC')
        ->execute();

      $variables['upcoming_events_in_series'] = empty($nids) ? 0 : count($nids);
    }
  }
}

/**
 * Implements hook_preprocess_views().
 */
function utmusic_preprocess_views_view_unformatted(array &$variables) {
  $view = $variables['view'];
  $view_id = $view->id();

  $dynamic_blocks = [
    'news_summary_list' => 'field_news_listing_link',
    'ed_dynamic_events_upcoming' => 'field_events_listing_link',
    'ed_dynamic_events_past' => 'field_events_past_listing_link',
  ];
  // Generate the dynamic blocks See All buttons at the bottom of the list.
  // We are using config pages custom config to allow the links to be
  // customizable by the end user instead of hardcoding their values.
  if (isset($dynamic_blocks[$view_id])) {
    // Custom site configuration.
    $custom_site_settings = ConfigPages::config('custom_site_settings');
    $field = $dynamic_blocks[$view_id];

    $variables['view_all_link_title'] = NULL;
    $variables['view_all_link_url'] = NULL;
    $link = !empty($custom_site_settings) && !$custom_site_settings->get($field)->isEmpty() ? $custom_site_settings->get($field)->first() : NULL;

    // If there is a link set in the custom site settings get the title and the
    // URL.
    if (!empty($link)) {
      $values = $link->getValue();

      $variables['view_all_link_title'] = !empty($values['title']) ? $values['title'] : NULL;

      $url = $link->getUrl();
      // If there is a category set for the argument then use that to pass to
      // the full listing page.
      if (
        !$url->isExternal() &&
        $url->isRouted() &&
        !empty($view->args[0]) &&
        $view->args[0] != 'all'
      ) {
        $categories = explode('+', $view->args[0]);
        // Only append the category if it's one item otherwise show all.
        if (count($categories) == 1) {
          $url->setRouteParameter('category', $view->args[0]);
        }
      }
      $variables['view_all_link_url'] = $url->toString();
    }
  }
}

/**
 * Renders a view.
 *
 * used to render a view allowing us to pass contextual arguments to the view.
 */
function utmusic_return_rendered_view($view, $display, $items = NULL, $categories = [], $title = NULL, $offset = NULL, $layout = NULL ) {
  $args = [];

  if (isset($categories['promote'])) {
    $args[] = $categories['promote'];
  }

  if (isset($categories['category1'])) {
    $args[] = $categories['category1'];
  }

  if (isset($categories['category2'])) {
    $args[] = $categories['category2'];
  }

  $args = array_merge($args, [
    $items,
    $title,
    $layout,
  ]);
  
  // Get View, set number of items to display and filters.
  $filtered_view = Views::getView($view);
  $filtered_view->setDisplay($display);
  $filtered_view->setItemsPerPage($items);
  $filtered_view->setArguments($args);
  $filtered_view->setOffset($offset);
  
  // Render filtered view.
  $render_view = $filtered_view->render();

  return $render_view;
}


/**
 * Returns the current node.
 *
 * Supports the standard node page, node previews and revisions. Use this
 * function instead of the node available in preprocess_page or preprocess_node
 * as this will return return the correct node when viewing a node, revision or
 * preview.
 *
 * @return \Drupal\node\NodeInterface
 *   The node.
 */
function utmusic_get_node_from_route() {
  $node = NULL;

  if (\Drupal::routeMatch()->getParameter('node_revision')) {
    return \Drupal::routeMatch()->getParameter('node_revision');
  }

  if (\Drupal::routeMatch()->getParameter('node')) {
    return \Drupal::routeMatch()->getParameter('node');
  }

  if (\Drupal::routeMatch()->getParameter('node_preview')) {
    return \Drupal::routeMatch()->getParameter('node_preview');
  }

  return $node;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function utmusic_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $suggestions = menu_block_theme_suggestions_menu($variables);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Exposed Views Filters Form.
 */
function utmusic_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // View 'news_full_list' - aply 'select2_all' module 
  $form['news_category']['#options']['All'] = t('All');
  // $form['news_category']['#select2'] = ['allowClear' => FALSE];
  $form['news_category']['#attributes']['class'][] = 'm-input';

  $form['area_study']['#options']['All'] = t('All');
  // $form['area_study']['#select2'] = ['allowClear' => FALSE];
  $form['area_study']['#attributes']['class'][] = 'm-input';

  // if (
  //   ($form['#id'] == 'views-exposed-form-events-full-list-block-full-list') 
  //   || ($form['#id'] == 'views-exposed-form-jobs-full-list-block-full-list')
  //   || ($form['#id'] == 'views-exposed-form-stories-full-list-default')
  //   ) {
  //   // Change buttons appearance
  //   $form['actions']['submit']['#attributes']['class'][] = 'a-button';
  //   $form['actions']['reset']['#attributes']['class'][] = 'a-button--secondary';

  //   if (isset($form['field_event_date_end_value_1'])) {
  //     $form['field_event_date_end_value_1']['#type'] = 'select';
  //     $form['field_event_date_end_value_1']['#size'] = NULL;
  //     $form['field_event_date_end_value_1']['#default_value'] = t('+30 days');
  //     $form['field_event_date_end_value_1']['#options'] = [
  //       '+30 days' => t('Events within 30 days'),
  //       '+2 years' => t('Upcoming Events')
  //     ];

  //     // $form['field_event_date_end_value_1']['#select2'] = ['allowClear' => FALSE];
  //     $form['field_event_date_end_value_1']['#attributes']['class'][] = 'm-input';
  //   }
  // }
}

function utmusic_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-','_', $variables['element']['#id']);
}

/**
 * Implements template_preprocess_menu().
 */
function utmusic_preprocess_menu(&$variables) {

  // Main menu (Desktop).
  if (
    $variables['menu_name'] == 'main' &&
    isset($variables['menu_block_configuration']) && 
    $variables['menu_block_configuration']['suggestion'] == 'main'
  ) {
    // Custom site configuration.
    // $custom_site_settings = ConfigPages::config('custom_site_settings');
    // $menu_logic = $custom_site_settings->hasField('field_menu_columns_logic') && !$custom_site_settings->get('field_menu_columns_logic')->isEmpty() ? $custom_site_settings->get('field_menu_columns_logic')->first()->getString() : NULL;
    $menu_logic = 'reverse';
    // Menu items.
    $items = $variables['items'];

    // Loop through the level 1 items in the menu to find out if they have any
    // children which means they should be a menu panel and need to be broken
    // into columns.
    foreach ($items as $level1_menu_id => $item) {
      $total_level2_items = 0;
      // If there are no children menu items skip preocessing this level 1 item.
      if (empty($item['below'])) {
        continue;
      }

      // Level 2 menu items.
      $level2_items = $item['below'];
      if ($menu_logic == 'reverse') {
        // dpm($level2_items);
        $level2_items = array_reverse($level2_items);
        // dpm($level2_items);
      }
      // The total amount of items (links) in level 2 and 3 for this level 1
      // item.
      $total_level2_items = $total_items = count($level2_items);
      // Section totals are the number of links per each level 2 menu item
      // including it's children items (level 3).
      $section_totals = [];
      foreach ($level2_items as $level2_menu_id => $level2_item) {
        // Level 3 menu items which are children of this level 2 menu item.
        $level3_items = $level2_item['below'];
        // Set a count of total links for this level 2 menu item.
        $section_totals[$level2_menu_id] = 1 + count($level3_items);
        // Increase the total item count for all items on this level 1 menu
        // item by the amount of level 3 .
        $total_items = $total_items + count($level3_items);
      }

      // Calculate the ideal amount of links in each column. We take the total
      // links of the level 1 menu item (menu level 2 + 3) and divide by the
      // amount of columns.
      $column_3_count = ceil($total_items / 3);
      // A variable to keep track of which level 2 items belong in which column.
      $columns = [];
      // A variable to keep track of the ideal amount of links in 2 columns.
      // This is calculated after we add the ideal amount of items to the 1st
      // column for 3 columns then with the remainder calculate the ideal amount
      // of links for 2 even columns.
      $column_2_count = 0;
      // Keep track of which level 2 menu items have already been placed into
      // columns.
      $processed_sections = [];
      // Loop through our 1 to 3 columns.
      foreach(range(1,3) as $col) {
        $link_count = 0;
        // Used to keep track of what level 2 items have been added to this
        // column.
        $column_section = [];

        // Loop through each level 2 menu items keyed by the menu link id and
        // value of the total count of links in the item.
        foreach ($section_totals as $menu_id => $count) {
          // If this level 2 item has been processed already (Set to a column)
          // then skip processing it for this column.
          if (isset($processed_sections[$menu_id])) {
            continue;
          }

          // Flag to track if this section should be added to this column.
          $process = FALSE;
          // If the link count is 0 it means we have not added any level 2
          // menu items to the column yet so always add the first level 2
          // item as links remain in the correct menu order.
          if ($link_count == 0) {
            $process = TRUE;
            $link_count = $count;
          }
          else {
            // Keep track of the initial count of links.
            $original_count = $link_count;
            // Get what would be the new count of links if we added on another
            // level 2 menu item in this column. We will use this number to
            // check if we should be adding another menu item or not.
            $link_count = $link_count + $count;
            // If this is the 1st column and the amount of links added is less
            // then or equal to our ideal (equal amount) of links in a 3
            // column layout then add this section (level 2 menu item) to the
            // column.
            if ($col == 1 && $link_count <= $column_3_count) {
              $process = TRUE;
            }
            // If this is the 2nd column and the amount of links is less then
            // or equal to our ideal amount of links in a 2 column layout then
            // add this level 2 menu item to the column.
            elseif ($col == 2 && $link_count <= $column_2_count) {
              $process = TRUE;
            }
            // Any left over menu items will get put in the 3rd column.
            elseif ($col == 3) {
              $process = TRUE;
            }

            // If this is the first column we can calculate the ideal amount
            // of items in 2 columns since we know how many items remain after
            // adding them to the 1st column.
            if (
              $col == 1 &&
              $link_count > $column_3_count &&
              $column_2_count == 0
            ) {
              $remainder = $total_items - $original_count;
              $column_2_count = ceil($remainder / 2);
            }
          }

          // If this section is supposed to be processed for this column then
          // it will be recorded.
          if ($process == true) {
            $column_section[$menu_id] = $menu_id;
            $processed_sections[$menu_id] = $menu_id;
          }
        }

        // Add all the column sections to the column.
        if (!empty($column_section)) {
          $columns[$col] = $column_section;
        }
      }

      // If there a level 2 menu item that has twice as many items then all
      // other level 2 menu items combined we should used a 2 column layout
      // and split this long menu item into 2 columns.
      //
      // The count of links in each column.
      $columns_count = [];
      // The column number with the most menu items.
      $largest_col = NULL;
      // The menu level 2 item with the most links count.
      $largest_sum = 0;
      // Loop through the columns that we built. In this loop we are trying
      // to determine how many links are in each column and if there is 1 col
      // that has only 1 level 2 menu items that is bigger then every other
      // column.
      foreach ($columns as $col_num => $column) {
        $count = 0;
        // Loop through each columns menu items and get a total count.
        foreach ($column as $col) {
          $count = $count + $section_totals[$col];
        }
        $columns_count[$col_num] = $count;
        // If the count of the column is bigger then the largest sum and there
        // is only 1 level 2 menu item in the column record the column number
        // and the amount of items.
        if (
          $count > $largest_sum &&
          count($column) == 1 &&
          $total_level2_items >= 2
        ) {
          // Keep track of the number of the largest column while iterating
          // through the array.
          $largest_col = $col_num;
          // Keep track of the amount of links in the largest column while
          // iterating through the array.
          $largest_sum = $count;
        }
      }

      $split_col_number = NULL;
      // If we have found 1 column that has 1 menu level 2 in it we need to
      // check if this 1 column has more then twice the amount of links of the
      // rest of the columns combined. If it does then we need to redo the
      // columns and split the largest column into 2 columns. With all the
      // rest of the links going into 1 column.
      if (!is_null($largest_col)) {
        // Calculate the total amount of items in the columns excluding the
        // largest column.
        unset($columns_count[$largest_col]);
        $new_column_total = array_sum($columns_count);

        // Will be the new column with the links of 2 columns moved into it.
        $new_column = [];
        $total_columns = count($columns);
        // If the largest column has more items then x2 all the rest of the
        // columns items then we will split.
        if ($largest_sum > ($new_column_total * 2)) {
          // Record which column should be split.
          $split_col_number = $largest_col;
          // Loop through the columns to combine all other columns into 1 new
          // column.
          foreach ($columns as $col_id => $column) {
            foreach ($column as $menu_id => $col) {
              if ($col_id != $largest_col) {
                $new_column[$menu_id] = $menu_id;
              }
            }
          }

          if ($menu_logic == 'reverse') {
            if ($split_col_number == 1) {
              $split_col_number = 2;
            }
            else {
              $split_col_number = 1;
            }
          }

          // Reset the columns to 2 columns. 
          if ($largest_col == 1) {
            $columns = [1 => $columns[$largest_col], 2 => $new_column];
          }
          // There is a sceneario with the reverse menu where if we have links
          // before and after the largerest menu item it will create 2 columns
          // but put all the links in the 2nd column even though there are links
          // before the largest menu item. To counter act this we need to switch
          // the new columns on this scenario.
          elseif (
            $largest_col == 2 &&
            $menu_logic == 'reverse' &&
            $total_columns == 3
          ) {
            $columns = [1 => $columns[$largest_col], 2 => $new_column];
            $split_col_number = 2;
          }
          else {
            $columns = [1 => $new_column, 2 => $columns[$largest_col]];
          }
        }
      }

      // If the menu is reveresed then reverse the items in the column and
      // reverse the columns so everything is fliped the right way.
      if ($menu_logic == 'reverse') {
        foreach ($columns as $n => $column) {
          // Reverse the menu items in the column back to the correct order.
          $columns[$n] = array_reverse($column);
        }

        // Reverse the columns back to the right order.
        $columns = array_reverse($columns);
        // Reindex the array keys starting from 1. So we can use these keys
        // to set our column classes in the twig file.
        $columns = array_combine(range(1, count($columns)), array_values($columns));
      }

      $items[$level1_menu_id]['columns_data']['columns'] = $columns;
      $items[$level1_menu_id]['columns_data']['split_col'] = $split_col_number;
    }

    $variables['items'] = $items;

  }
}