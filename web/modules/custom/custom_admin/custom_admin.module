<?php

/**
 * @file
 * Custom administration overrides.
 *
 * This file contains some default administration overrides that have to do with
 * EDpack modules that have been installed. It is intended as a starter module
 * and can be modified to adapt to the websites needs.
 *
 * It can be renamed before installing to your_project_admin.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements template_preprocess_page().
 */
function custom_admin_preprocess_html(&$variables) {
  $logged_in = \Drupal::currentUser()->isAuthenticated();

  if ($logged_in == TRUE) {
    if (\Drupal::service('router.admin_context')->isAdminRoute()) {
      $variables['html_attributes']->addClass('is-loggedin');  
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function custom_admin_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'custom_admin/custom_admin';
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function custom_admin_editor_js_settings_alter(array &$settings) {
  // Enable the showblocks button setting by default
  foreach (array_keys($settings['editor']['formats']) as $text_format_id) {
    if ($settings['editor']['formats'][$text_format_id]['editor'] === 'ckeditor') {
      $settings['editor']['formats'][$text_format_id]['editorSettings']['startupOutlineBlocks'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function custom_admin_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $view_id = $variables['id'];

  $tag_storage = $view->storage->get('tag');
  $is_embeddable_list = !empty($tag_storage) && strpos($tag_storage, 'embeddable_list');

  if ($is_embeddable_list === TRUE) {
    $active_theme = \Drupal::service('theme.manager')->getActiveTheme();
    // Need to remove the form element from views that are displayed in the
    // backend to avoid issues with loading a form in a form.
    if ($active_theme->getName() == 'adminspring') {
      if (isset($variables['exposed']['#theme_wrappers'][0])) {
        $variables['exposed']['#theme_wrappers'][0] = 'container';
      }
    }
  }
}

/**
 * Implements hook_field_widget_complete_form_alter().
 */
function custom_admin_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  $elements = &$field_widget_complete_form['widget'];
  $field_definition = $context['items']->getFieldDefinition();

  if (
    $field_definition->getType() == 'entity_reference_revisions' &&
    $field_definition->getName() == 'field_page_header'
  ) {
    // Loop through the array children. We don't have a way to get the parent
    // delta so we need to loop through all of the possible children. This is
    // due to an AJAX form inserting or deleting and reinserting always
    // increasing the delta.
    foreach (Element::children($elements) as $key) {

      // Video field in page header.
      if (isset($elements[$key]['subform']['field_header_video'])) {
        $elements[$key]['subform']['field_header_video']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_header_style]"]' => [
              'value' => 'video',
            ],
          ],
        ];
      }

      // Image portrait field in page header.
      if (isset($elements[$key]['subform']['field_header_image_portrait'])) {
        $elements[$key]['subform']['field_header_image_portrait']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_header_style]"]' => [
              'value' => 'portrait',
            ],
          ],
        ];
      }

      // Image landscape field in page header.
      if (isset($elements[$key]['subform']['field_header_image_landscape'])) {
        $elements[$key]['subform']['field_header_image_landscape']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_header_style]"]' => [
              'value' => 'landscape',
            ],
          ],
        ];
      }

      // Image 1 header field in page header.
      if (isset($elements[$key]['subform']['field_header_image1'])) {
        $elements[$key]['subform']['field_header_image1']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_header_style]"]' => [
              ['value' => 'top-bottom'],
              ['value' => 'bottom-top'],
            ],
          ],
        ];
      }

      // Image 2 header field in page header.
      if (isset($elements[$key]['subform']['field_header_image2'])) {
        $elements[$key]['subform']['field_header_image2']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_header_style]"]' => [
              ['value' => 'top-bottom'],
              ['value' => 'bottom-top'],
            ],
          ],
        ];
      }

      // Image 2 header field in page header.
      if (isset($elements[$key]['subform']['field_carousel_header_sec_title'])) {
        $elements[$key]['subform']['field_carousel_header_sec_title']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];
      }

      // Carousel Card 1 field in page header.
      if (isset($elements[$key]['subform']['field_carousel_header_card1'])) {
        $elements[$key]['subform']['field_carousel_header_card1']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];
      }

      // Carousel Card 2 field in page header.
      if (isset($elements[$key]['subform']['field_carousel_header_card2'])) {
        $elements[$key]['subform']['field_carousel_header_card2']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];
      }

      // Carousel Card 3 field in page header.
      if (isset($elements[$key]['subform']['field_carousel_header_card3'])) {
        $elements[$key]['subform']['field_carousel_header_card3']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];
      }

      // Carousel Card 3 field in page header.
      if (isset($elements[$key]['subform']['field_carousel_header_card3'])) {
        $elements[$key]['subform']['field_carousel_header_card3']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $key . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];
      }
  
    }
  }

  // Carousel header card 1.
  if (
    $field_definition->getType() == 'entity_reference_revisions' &&
    $field_definition->getName() == 'field_carousel_header_card1'
  ) {

    $parents = $field_widget_complete_form['#parents'];
    foreach (Element::children($elements) as $key) {
      
      // Illustration field in card 1.
      if (isset($elements[$key]['subform']['field_card_illustration'])) {
        $elements[$key]['subform']['field_card_illustration']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $parents[1] . '][subform][field_carousel_header_card1][' . $key . '][subform][field_card_variation]"]' => [
              'value' => 'illustration',
            ],
          ],
        ];
      }

      // Image field in card 1.
      if (isset($elements[$key]['subform']['field_card_image'])) {
        $elements[$key]['subform']['field_card_image']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $parents[1] . '][subform][field_carousel_header_card1][' . $key . '][subform][field_card_variation]"]' => [
              'value' => 'image',
            ],
          ],
        ];
      }

    }
  }

  // Carousel header card 2.
  if (
    $field_definition->getType() == 'entity_reference_revisions' &&
    $field_definition->getName() == 'field_carousel_header_card2'
  ) {

    $parents = $field_widget_complete_form['#parents'];
    foreach (Element::children($elements) as $key) {
      
      // Illustration field in card 2.
      if (isset($elements[$key]['subform']['field_card_illustration'])) {
        $elements[$key]['subform']['field_card_illustration']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $parents[1] . '][subform][field_carousel_header_card2][' . $key . '][subform][field_card_variation]"]' => [
              'value' => 'illustration',
            ],
          ],
        ];
      }

      // Image field in card 2.
      if (isset($elements[$key]['subform']['field_card_image'])) {
        $elements[$key]['subform']['field_card_image']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $parents[1] . '][subform][field_carousel_header_card2][' . $key . '][subform][field_card_variation]"]' => [
              'value' => 'image',
            ],
          ],
        ];
      }

    }
  }

  // Carousel header card 3.
  if (
    $field_definition->getType() == 'entity_reference_revisions' &&
    $field_definition->getName() == 'field_carousel_header_card3'
  ) {

    $parents = $field_widget_complete_form['#parents'];
    foreach (Element::children($elements) as $key) {
      
      // Illustration field in card 3.
      if (isset($elements[$key]['subform']['field_card_illustration'])) {
        $elements[$key]['subform']['field_card_illustration']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $parents[1] . '][subform][field_carousel_header_card3][' . $key . '][subform][field_card_variation]"]' => [
              'value' => 'illustration',
            ],
          ],
        ];
      }

      // Image field in card 3.
      if (isset($elements[$key]['subform']['field_card_image'])) {
        $elements[$key]['subform']['field_card_image']['#states'] = [
          'visible' => [
            ':input[name="field_page_header[' . $parents[1] . '][subform][field_carousel_header_card3][' . $key . '][subform][field_card_variation]"]' => [
              'value' => 'image',
            ],
          ],
        ];
      }

    }
  }

}

/**
 * Implements hook_form_layout_paragraphs_component_form_alter().
 */
function custom_admin_form_layout_paragraphs_component_form_alter(array &$form, FormStateInterface &$form_state) {
  $paragraph = $form['#paragraph'];
  $paragraph_type = $paragraph->getType();

  // Dynamic news paragraph.
  if ($paragraph_type == 'news_summary_list_dynamic') {
    // Show field "Other Number of Items" if field "Number of Items" is set
    // to "Other".
    $form['field_news_other_number_of_items']['#states'] = [
      'visible' => [
        ':input[name="field_news_number_of_items"]' => [
          'value' => 'other',
        ],
      ],
    ];

    // Set field "Other Number of Items" to required is field "Number of
    // Items" is set to "Other".
    $form['field_news_other_number_of_items']['widget'][0]['value']['#states'] = [
      'required' => [
        ':input[name="field_news_number_of_items"]' => [
          'value' => 'other',
        ],
      ],
    ];
  }

  // Dynamic events paragraph.
  if ($paragraph_type == 'events_summary_list_dynamic') {
    // Show field "Other Number of Items" if field "Number of Items" is set
    // to "Other".
    $form['field_events_other_number_items']['#states'] = [
      'visible' => [
        ':input[name="field_events_number_of_items"]' => [
          'value' => 'other',
        ],
      ],
    ];

    // Set field "Other Number of Items" to required is field "Number of
    // Items" is set to "Other".
    $form['field_events_other_number_items']['widget'][0]['value']['#states'] = [
      'required' => [
        ':input[name="field_events_number_of_items"]' => [
          'value' => 'other',
        ],
      ],
    ];
  }

  // Call to action paragraph.
  if ($paragraph_type == 'cta') {
    $form['field_cta_image']['#states'] = [
      'visible' => [
        ':input[name="field_cta_variation"]' => [
          'value' => 'image',
        ],
      ],
    ];
  }

  // Quote paragraph.
  if ($paragraph_type == 'quote') {
    $form['field_quote_image_main']['#states'] = [
      'visible' => [
        ':input[name="field_quote_variation"]' => [
          'value' => 'image',
        ],
      ],
    ];

    $form['field_quote_image_small']['#states'] = [
      'visible' => [
        ':input[name="field_quote_variation"]' => [
          'value' => 'image',
        ],
      ],
    ];
  }

  // Message paragraph.
  if ($paragraph_type == 'message') {
    $form['field_message_divider']['#states'] = [
      'visible' => [
        ':input[name="field_message_variation"]' => [
          'value' => 'blue',
        ],
      ],
    ];
  }

  // Image section paragraph.
  if ($paragraph_type == 'image_section') {
    $form['field_image_section_image_crop']['#states'] = [
      'visible' => [
        ':input[name="field_image_section_variation"]' => [
          'value' => 'none',
        ],
      ],
    ];
  }

  // Card paragraph.
  if ($paragraph_type == 'card') {
    $form['field_card_illustration']['#states'] = [
      'visible' => [
        ':input[name="field_card_variation"]' => [
          'value' => 'illustration',
        ],
      ],
    ];

    $form['field_card_image']['#states'] = [
      'visible' => [
        ':input[name="field_card_variation"]' => [
          'value' => 'image',
        ],
      ],
    ];
  }

}


/**
 * Implements hook_form_NODE_form_alter().
 */
function custom_admin_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // The "news" add and edit forms.
  if ($form_id == 'node_news_form' || $form_id == 'node_news_edit_form' ) {

    // Show "Image Landscape" field if the "variation" field is set to landscape.
    $form['field_news_header_image_landscap']['#states'] = [
      'visible' => [
        ':input[name="field_news_header_variation"]' => ['value' => 'landscape'],
      ],
    ];

    // Show "Image Portrait" field if the "variation" field is set to portrait.
    $form['field_news_header_image_portrait']['#states'] = [
      'visible' => [
        ':input[name="field_news_header_variation"]' => ['value' => 'portrait'],
      ],
    ];

    // Show "Video" field if the "variation" field is set to video.
    $form['field_news_header_video']['#states'] = [
      'visible' => [
        ':input[name="field_news_header_variation"]' => ['value' => 'video'],
      ],
    ];
  }

  // The "events" add and edit forms.
  if ($form_id == 'node_event_form' || $form_id == 'node_event_edit_form' ) {
    // Show the "landscape" field
    $form['field_event_header_image_landsca']['#states'] = [
      'visible' => [
        ':input[name="field_event_header_variation"]' => ['value' => 'landscape'],
      ]
    ];

    // Show the "portrait" image field
    $form['field_event_header_image_portra']['#states'] = [
      'visible' => [
        ':input[name="field_event_header_variation"]' => ['value' => 'portrait'],
      ]
    ];

    // Show "Related Events" field for manual pick
    $form['field_event_related_events']['#states'] = [
      'visible' => [
        ':input[name="field_event_related_pick"]' => ['value' => 'manual'],
      ]
    ];
  }

  // The "program" add and edit forms.
  if ($form_id == 'node_program_form' || $form_id == 'node_program_edit_form' ) {
    // Show "Feature Media" field for manual pick
    $form['field_program_featured_media']['#states'] = [
      'visible' => [
        ':input[name="field_program_enable_media"]' => ['value' => 'manual'],
      ]
    ];
  }

  // The "people" add and edit forms.
  if ($form_id == 'node_people_form' || $form_id == 'node_people_edit_form' ) {
    if (isset($form['field_people_research_profile']['widget'][0]['uri']['#description'])) {
      $form['field_people_research_profile']['widget'][0]['uri']['#description'] = t('Your DiscoverResearch Profile Eg. https://discover.research.utoronto.ca/123-your-name.');
    }

    // Show the default fields if profile type is "default"
    $form['field_people_education']['#states'] = [
      'visible' => [
        ':input[name="field_people_profile_type"]' => ['value' => 'default'],
      ]
    ];

    $form['field_people_background']['#states'] = [
      'visible' => [
        ':input[name="field_people_profile_type"]' => ['value' => 'default'],
      ]
    ];

    $form['field_people_activities']['#states'] = [
      'visible' => [
        ':input[name="field_people_profile_type"]' => ['value' => 'default'],
      ]
    ];

    $form['field_people_teaching']['#states'] = [
      'visible' => [
        ':input[name="field_people_profile_type"]' => ['value' => 'default'],
      ]
    ];

    $form['field_people_creative_works']['#states'] = [
      'visible' => [
        ':input[name="field_people_profile_type"]' => ['value' => 'default'],
      ]
    ];

    // Show the custom field if profile type is "custom"
    $form['field_people_custom_content']['#states'] = [
      'visible' => [
        ':input[name="field_people_profile_type"]' => ['value' => 'custom'],
      ]
    ];

    // Show "Feature Media" field for manual pick
    $form['field_people_featured_media']['#states'] = [
      'visible' => [
        ':input[name="field_people_enable_media"]' => ['value' => 'manual'],
      ]
    ];
  }
}

/**
* Implements hook_field_group_form_process().
*/
function custom_admin_field_group_form_process(array &$element, &$group, &$complete_form) {
  $form = $complete_form;

  if (isset($form['group_link'])) {
    $form['group_link']['#states'] = [
      'visible' => [[
        ':input[name="field_event_price"]' => ['value' => 'paid']
      ]]
    ];
  }

}


/**
 * Implements hook_form_alter().
 */
function custom_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Check if the form_id matches the desired form
  if ($form_id == 'menu_link_content_main_form') {

    // Define the fields we want to show/hide.
    $fields_to_modify = ['field_menu_promo_title', 'field_menu_promo_body', 'field_menu_promo_button'];

    // The condition for visibility
    $visibility_condition = [
      'visible' => [
        ':input[name="field_menu_promotional_panel[value]"]' => ['checked' => TRUE],
      ],
    ];

    // Loop through each field and assign the condition
    foreach ($fields_to_modify as $field) {
      $form[$field]['#states'] = $visibility_condition;
    }

    // Hidden unnecessary menu fields
    $form['menu_parent']['#access'] = FALSE;
    $form['weight']['#access'] = FALSE;
    $form['expanded']['#access'] = FALSE;
  
    // Hiding fields depending on item menu level.
    // Get the menu link content entity and parent ID
    $menu_link_content = $form_state->getFormObject()->getEntity();
    $parent_id = $menu_link_content->getParentId();

    // Check if it's a top-level menu item
    $hasColon = strpos($parent_id, ':') !== FALSE;

    if (!$hasColon) {
        $menu_level = 'first';
        \Drupal::messenger()->addMessage(t('You are now in the first level of the menu.'));
    } else {
        // Try to determine if it's a second-level menu item
        $uuid = explode(':', $parent_id)[1];
        
        // Load the parent menu link entity
        $parent_menu_link_content = \Drupal::entityTypeManager()
            ->getStorage('menu_link_content')
            ->loadByProperties(['uuid' => $uuid]);

        if ($parent_menu_link_content && !strpos(reset($parent_menu_link_content)->getParentId(), ':')) {
            $menu_level = 'second';
            \Drupal::messenger()->addMessage(t('You are now in the second level of the menu.'));
        } else {
          $menu_level = 'other';
          \Drupal::messenger()->addMessage(t('You are now in the third level of the menu or deeper.'));
        }
    }

    // First level of menu.
    if ($menu_level != 'first') {
      // Execute code when $menu_level is not 'first'
      $fields_for_first_lvl = ['field_menu_promo_title', 'field_menu_promo_body', 'field_menu_promo_button', 'field_menu_promotional_panel'];

      // Loop through the fields and set #access
      foreach ($fields_for_first_lvl as $field_name) {
        if (isset($form[$field_name])) {
          $form[$field_name]['#disabled'] = TRUE;
        }
      }
    }
    // End Hiding fields depending on item menu level.
  }
}
