<?php

/**
 * @file
 * Custom administration overrides.
 *
 * This file contains some default administration overrides that have to do with
 * EDpack modules that have been installed. It is intended as a starter module
 * and can be modified to adapt to the websites needs.
 *
 * It can be renamed before installing to your_project_admin.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements template_preprocess_page().
 */
function custom_admin_preprocess_html(&$variables) {
  $logged_in = \Drupal::currentUser()->isAuthenticated();

  if ($logged_in == TRUE) {
    if (\Drupal::service('router.admin_context')->isAdminRoute()) {
      $variables['html_attributes']->addClass('is-loggedin');  
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function custom_admin_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'custom_admin/custom_admin';
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function custom_admin_editor_js_settings_alter(array &$settings) {
  // Enable the showblocks button setting by default
  foreach (array_keys($settings['editor']['formats']) as $text_format_id) {
    if ($settings['editor']['formats'][$text_format_id]['editor'] === 'ckeditor') {
      $settings['editor']['formats'][$text_format_id]['editorSettings']['startupOutlineBlocks'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function custom_admin_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $view_id = $variables['id'];

  $tag_storage = $view->storage->get('tag');
  $is_embeddable_list = !empty($tag_storage) && strpos($tag_storage, 'embeddable_list');

  if ($is_embeddable_list === TRUE) {
    $active_theme = \Drupal::service('theme.manager')->getActiveTheme();
    // Need to remove the form element from views that are displayed in the
    // backend to avoid issues with loading a form in a form.
    if ($active_theme->getName() == 'adminspring') {
      if (isset($variables['exposed']['#theme_wrappers'][0])) {
        $variables['exposed']['#theme_wrappers'][0] = 'container';
      }
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function custom_admin_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  if (isset($element['#paragraph_type'])) {
    $paragraph_type = isset($element['#paragraph_type']) ? $element['#paragraph_type'] : FALSE;

    // Hero banner
    // Check if the paragraph type is 'header' and the '#parents' element is set in the element.
    if ($paragraph_type === 'header' && isset($element['subform']['#parents'])) {

      // Define an array of parent fields to check.
      $parent_fields = ['field_page_header'];

      // Initialize the parent field variable to NULL.
      $parent_field = NULL;

      // Loop through each parent field and check if it is present in the '#parents' element.
      foreach ($parent_fields as $field_name) {
        if (in_array($field_name, $element['subform']['#parents'], TRUE)) {
          $parent_field = $field_name;
          break; // Once we find the parent field, we can exit the loop.
        }
      }

      // If the parent field is found, set the 'visible' state of the 'field_header_image' element.
      if ($parent_field !== NULL) {

        // Get the parent paragraph delta.
        $parent_delta = $element['subform']['field_header_style']['widget']['#parents'][1];

        $element['subform']['field_header_video']['#states'] = [
          'visible' => [
            ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_header_style]"]' => [
              'value' => 'video',
            ],
          ],
        ];

        $element['subform']['field_header_image_portrait']['#states'] = [
          'visible' => [
            ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_header_style]"]' => [
              'value' => 'portrait',
            ],
          ],
        ];

        $element['subform']['field_header_image_landscape']['#states'] = [
          'visible' => [
            ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_header_style]"]' => [
              'value' => 'landscape',
            ],
          ],
        ];

        $element['subform']['field_header_image1']['#states'] = [
          'visible' => [
            [
              ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_header_style]"]' => ['value' => 'top-bottom'],
            ],
            [
              ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_header_style]"]' => ['value' => 'bottom-top'],
            ],
          ],
        ];

        $element['subform']['field_header_image2']['#states'] = [
          'visible' => [
            [
              ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_header_style]"]' => ['value' => 'top-bottom'],
            ],
            [
              ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_header_style]"]' => ['value' => 'bottom-top'],
            ],
          ],
        ];
        
      }
    }

    if ($paragraph_type === 'carousel_header' && isset($element['subform']['#parents'])) {

      // Define an array of parent fields to check.
      $parent_fields = ['field_page_header'];

      // Initialize the parent field variable to NULL.
      $parent_field = NULL;

      // Loop through each parent field and check if it is present in the '#parents' element.
      foreach ($parent_fields as $field_name) {
        if (in_array($field_name, $element['subform']['#parents'], TRUE)) {
          $parent_field = $field_name;
          break; // Once we find the parent field, we can exit the loop.
        }
      }

      // If the parent field is found, set the 'visible' state of the 'field_header_image' element.
      if ($parent_field !== NULL) {

        // Get the parent paragraph delta.
        $parent_delta = $element['subform']['field_carousel_header_sec_layout']['widget']['#parents'][1];

        $element['subform']['field_carousel_header_sec_title']['#states'] = [
          'visible' => [
            ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];

        $element['subform']['field_carousel_header_card1']['#states'] = [
          'visible' => [
            ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];

        $element['subform']['field_carousel_header_card2']['#states'] = [
          'visible' => [
            ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];

        $element['subform']['field_carousel_header_card3']['#states'] = [
          'visible' => [
            ':input[name="' . $parent_field . '[' . $parent_delta . '][subform][field_carousel_header_sec_layout]"]' => [
              'value' => 'cards_3',
            ],
          ],
        ];
      }
    }

    // If this is a dynamic news block paragraph.
    if ($paragraph_type == 'news_summary_list_dynamic') {
      // Check if the form as number of items field.
      if (isset($element['subform']['field_news_number_of_items'])) {
        // Get parent paragraph delta.
        $parent_delta = $element['subform']['field_news_number_of_items']['widget']['#parents'][1];

        // Show field "Other Number of Items" if field "Number of Items" is set
        // to "Other".
        $element['subform']['field_news_other_number_of_items']['#states'] = [
          'visible' => [
            ':input[name="field_page_section[' . $parent_delta . '][subform][field_news_number_of_items]"]' => [
              'value' => 'other',
            ],
          ],
        ];

        // Set field "Other Number of Items" to required is field "Number of
        // Items" is set to "Other".
        $element['subform']['field_news_other_number_of_items']['widget'][0]['value']['#states'] = [
          'required' => [
            ':input[name="field_page_section[' . $parent_delta . '][subform][field_ed_news_number_of_items]"]' => [
              'value' => 'other',
            ],
          ],
        ];
      }
    }

    // If these are the dynamic events blocks we want to change the states based
    // on the input values.
    if (
      $paragraph_type == 'ed_event_dynamic_block_upcoming' ||
      $paragraph_type == 'ed_event_dynamic_block_past'
    ) {
      // Checkout if the subform as the number of items field.
      if (isset($element['subform']['field_ed_event_num_items'])) {
        // Get parent paragraph delta.
        $parent_delta = $element['subform']['field_ed_event_num_items']['widget']['#parents'][1];

        // Show field "Other Number of Items" if field "Number of Items" is set
        // to "Other".
        $element['subform']['field_ed_event_other_num_items']['#states'] = [
          'visible' => [
            ':input[name="field_ed_page_body[' . $parent_delta . '][subform][field_ed_event_num_items]"]' => [
              'value' => 'other',
            ],
          ],
        ];

        // Set field "Other Number of Items" to required is field "Number of
        // Items" is set to "Other".
        $element['subform']['field_ed_event_other_num_items']['widget'][0]['value']['#states'] = [
          'required' => [
            ':input[name="field_ed_page_body[' . $parent_delta . '][subform][field_ed_event_num_items]"]' => [
              'value' => 'other',
            ],
          ],
        ];
      }
    }
  }

  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */

  $field_definition = $context['items']->getFieldDefinition();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $bundle = $field_definition->getTargetBundle();
  $field_name = $context['items']->getName();

  if($bundle == 'news_summary_list_dynamic') {
    if ($field_name == 'field_news_other_number_of_items') {
      $element['value']['#states'] = [
        'visible' => [
          ':input[name="field_news_number_of_items"]' => [
            'value' => 'other',
          ],
        ],
      ];
    }
  }

  if($bundle == 'events_summary_list_dynamic') {
    if ($field_name == 'field_events_other_number_items') {
      $element['value']['#states'] = [
        'visible' => [
          ':input[name="field_events_number_of_items"]' => [
            'value' => 'other',
          ],
        ],
      ];
    }
  }

  if ($bundle == 'carousel_header') {
    if ($field_name == 'field_carousel_header_sec_title') {
      $element['#states'] = [
        'visible' => [
          ':input[name="field_carousel_header_sec_layout"]' => [
            'value' => 'cards_3',
          ],
        ],
      ];
    }

    if ($field_name == 'field_carousel_header_card1') {
      $element['#states'] = [
        'visible' => [
          ':input[name="field_carousel_header_sec_layout"]' => [
            'value' => 'cards_3',
          ],
        ],
      ];
    }

    if ($field_name == 'field_carousel_header_card2') {
      $element['#states'] = [
        'visible' => [
          ':input[name="field_carousel_header_sec_layout"]' => [
            'value' => 'cards_3',
          ],
        ],
      ];
    }

    if ($field_name == 'field_carousel_header_card3') {
      $element['#states'] = [
        'visible' => [
          ':input[name="field_carousel_header_sec_layout"]' => [
            'value' => 'cards_3',
          ],
        ],
      ];
    }
  }

  if ($bundle == 'cta') {
    if ($field_name == 'field_cta_image') {
      $element['#states'] = [
        'visible' => [
          ':input[name="field_cta_variation"]' => [
            'value' => 'image',
          ],
        ],
      ];
    }
  }

  //Quote PT 
  if ($bundle == 'quote') {
    if ($field_name == 'field_quote_image_main') {
      $element['#states'] = [
        'visible' => [
          ':input[name="field_quote_variation"]' => [
            'value' => 'image',
          ],
        ],
      ];
    }

    if ($field_name == 'field_quote_image_small') {
      $element['#states'] = [
        'visible' => [
          ':input[name="field_quote_variation"]' => [
            'value' => 'image',
          ],
        ],
      ];
    }
  }
}


/**
 * Implements hook_form_NODE_form_alter().
 */
function custom_admin_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // The "news" add and edit forms.
  if ($form_id == 'node_news_form' || $form_id == 'node_news_edit_form' ) {

    // Show "Image Landscape" field if the "variation" field is set to landscape.
    $form['field_news_header_image_landscap']['#states'] = [
      'visible' => [
        ':input[name="field_news_header_variation"]' => ['value' => 'landscape'],
      ],
    ];

    // Show "Image Portrait" field if the "variation" field is set to portrait.
    $form['field_news_header_image_portrait']['#states'] = [
      'visible' => [
        ':input[name="field_news_header_variation"]' => ['value' => 'portrait'],
      ],
    ];

    // Show "Video" field if the "variation" field is set to video.
    $form['field_news_header_video']['#states'] = [
      'visible' => [
        ':input[name="field_news_header_variation"]' => ['value' => 'video'],
      ],
    ];
  }

  // The "events" add and edit forms.
  if ($form_id == 'node_event_form' || $form_id == 'node_event_edit_form' ) {
    // Show the "landscape" field
    $form['field_event_header_image_landsca']['#states'] = [
      'visible' => [
        ':input[name="field_event_header_variation"]' => ['value' => 'landscape'],
      ]
    ];

    // Show the "portrait" image field
    $form['field_event_header_image_portra']['#states'] = [
      'visible' => [
        ':input[name="field_event_header_variation"]' => ['value' => 'portrait'],
      ]
    ];

    // Show the "custom location" field
    $form['field_event_custom_location']['#states'] = [
      'visible' => [
        ':input[name="field_event_location"]' => ['value' => 'custom'],
      ]
    ];

    // Show "Feature Media" field for manual pick
    $form['field_event_featured_media']['#states'] = [
      'visible' => [
        ':input[name="field_event_featured_media_pick"]' => ['value' => 'manual'],
      ]
    ];

    // Show "Related Events" field for manual pick
    $form['field_event_related_events']['#states'] = [
      'visible' => [
        ':input[name="field_event_related_pick"]' => ['value' => 'manual'],
      ]
    ];


  }
}

/**
* Implements hook_field_group_form_process().
*/
function custom_admin_field_group_form_process(array &$element, &$group, &$complete_form) {
  $form = $complete_form;

  $form['group_link']['#states'] = [
    'visible' => [[
      ':input[name="field_event_price"]' => ['value' => 'paid']
    ]]
  ];
}


/**
 * Implements hook_form_alter().
 */
function custom_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Check if the form_id matches the desired form
  if ($form_id == 'menu_link_content_main_form') {

    // Define the fields we want to show/hide.
    $fields_to_modify = ['field_menu_promo_title', 'field_menu_promo_body', 'field_menu_promo_button', 'field_promotional_panel_help'];

    // The condition for visibility
    $visibility_condition = [
      'visible' => [
        ':input[name="field_menu_promotional_panel[value]"]' => ['checked' => TRUE],
      ],
    ];

    // Loop through each field and assign the condition
    foreach ($fields_to_modify as $field) {
      $form[$field]['#states'] = $visibility_condition;
    }
  }
}
