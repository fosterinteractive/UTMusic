<?php

/**
 * @file
 * Site configuration.
 *
 * This module uses config_pages configuration to override 
 * a sites configuration to allow for personalization of a site.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\config_pages\Entity\ConfigPages;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function custom_configuration_field_group_form_process_build_alter(&$element) {

  // Hide news field group if news content type is disabled.
  if (isset($element['group_news'])) {
    $element['group_news']['#states'] = [
      'invisible' => [
        ':input[name="field_site_disable_content[ed_news]"]' => ['checked' => TRUE]
      ]
    ];
  }

  // Hide Events field group if events content type is disabled.
  if (isset($element['group_events'])) {
    $element['group_events']['#states'] = [
      'invisible' => [
        ':input[name="field_site_disable_content[ed_event]"]' => ['checked' => TRUE]
      ]
    ];
  }
}

/**
 * implements hook_ENTITY_TYPE_create_access().
 */
function custom_configuration_node_create_access(AccountInterface $account, array $context, $entity_bundle) {
  // Disable access to creating node types.
  $custom_site_settings = ConfigPages::config('custom_site_settings');
  $disabled_content = !empty($custom_site_settings) && 
  $custom_site_settings->hasField('field_site_disable_content') && 
  !$custom_site_settings->get('field_site_disable_content')->isEmpty() ? $custom_site_settings->get('field_site_disable_content')->getValue() : [];

  $disabled_content_check = [];
  foreach ($disabled_content as $value) {
    $disabled_content_check[] = $value['value'];
  }

  if (in_array($entity_bundle, $disabled_content_check)) {
    return AccessResult::forbidden();
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function custom_configuration_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $entity_bundle = $node->bundle();

  // Disable access to configured node types.
  $custom_site_settings = ConfigPages::config('custom_site_settings');
  $disabled_content = !empty($custom_site_settings) && 
  $custom_site_settings->hasField('field_site_disable_content') && !$custom_site_settings->get('field_site_disable_content')->isEmpty() ? $custom_site_settings->get('field_site_disable_content')->getValue() : [];

  $disabled_content_check = [];
  foreach ($disabled_content as $value) {
    $disabled_content_check[] = $value['value'];

    if (in_array($entity_bundle, $disabled_content_check)) {
      return AccessResult::forbidden();
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function custom_configuration_paragraph_create_access(AccountInterface $account, array $context, $entity_bundle) {
  // Disable paragraphs associated with the node content types that
  // are disabled.
  $custom_site_settings = ConfigPages::config('custom_site_settings');
  $disabled_content = !empty($custom_site_settings) && 
  $custom_site_settings->hasField('field_site_disable_content') && !$custom_site_settings->get('field_site_disable_content')->isEmpty() ? $custom_site_settings->get('field_site_disable_content')->getValue() : [];
  // Current user Role
  $user_roles = Drupal::currentUser()->getRoles();

  $disabled_content_check = [];
  foreach ($disabled_content as $value) {
    $disabled_content_check[] = $value['value'];
  }

  if (in_array('ed_event', $disabled_content_check)) {
    if (
      $entity_bundle == 'ed_event_dynamic_block_past' ||
      $entity_bundle == 'ed_event_dynamic_block_upcoming' ||
      $entity_bundle == 'ed_event_dynamic_list_past' ||
      $entity_bundle == 'ed_event_dynamic_list_upcoming'
    ) {
      return AccessResult::forbidden();
    }
  }

  if (in_array('ed_news', $disabled_content_check)) {
    if (
      $entity_bundle == 'ed_news_dynamic_block' ||
      $entity_bundle == 'ed_news_dynamic_full_list'
    ) {
      return AccessResult::forbidden();
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function custom_configuration_paragraph_access(ParagraphInterface $entity, $operation, AccountInterface $account) {
  $entity_bundle = $entity->getType();

  // Disable access to configured paragraph types.
  $custom_site_settings = ConfigPages::config('custom_site_settings');
  $disabled_content = !empty($custom_site_settings) && 
  $custom_site_settings->hasField('field_site_disable_content') && !$custom_site_settings->get('field_site_disable_content')->isEmpty() ? $custom_site_settings->get('field_site_disable_content')->getValue() : [];
  // Current user Role
  $user_roles = Drupal::currentUser()->getRoles();

  $disabled_content_check = [];
  foreach ($disabled_content as $value) {
    $disabled_content_check[] = $value['value'];
  }

  if (in_array('ed_event', $disabled_content_check)) {
    if (
      $entity_bundle == 'ed_event_dynamic_block_past' ||
      $entity_bundle == 'ed_event_dynamic_block_upcoming' ||
      $entity_bundle == 'ed_event_dynamic_list_past' ||
      $entity_bundle == 'ed_event_dynamic_list_upcoming'
    ) {
      return AccessResult::forbidden();
    }
  }

  if (in_array('ed_news', $disabled_content_check)) {
    if (
      $entity_bundle == 'ed_news_dynamic_block' ||
      $entity_bundle == 'ed_news_dynamic_full_list'
    ) {
      return AccessResult::forbidden();
    }
  }

  // No opinion.
  return AccessResult::neutral();
}
